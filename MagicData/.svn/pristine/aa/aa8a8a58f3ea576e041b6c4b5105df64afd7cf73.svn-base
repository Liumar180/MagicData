package com.integrity.dataSmart.titanGraph.action;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.apache.log4j.Logger;

import com.integrity.dataSmart.common.DataType;
import com.integrity.dataSmart.titanGraph.bean.QQFriend;
import com.integrity.dataSmart.titanGraph.bean.QqGroupsBeans;
import com.integrity.dataSmart.titanGraph.service.SearchQqRelationService;
import com.integrity.dataSmart.util.titan.TitanGraphUtil;
import com.opensymphony.xwork2.ActionSupport;
import com.thinkaurelius.titan.core.TitanGraph;
import com.tinkerpop.blueprints.Vertex;

/**
 * @author liubf
 * 查询qq关联信息action
 *
 */
public class SearchQqRelationAction extends ActionSupport{
	private static final long serialVersionUID = 1L;
	private SearchQqRelationService searchQqRelationService;
	
	private List<QQFriend> friendslist;
	private String qq;
	private Map<String, Object> root;
	private TitanGraph graph = TitanGraphUtil.getInstance().getTitanGraph();
	private SimpleDateFormat simpleDateFormat = new SimpleDateFormat(DataType.DATEFORMATSTR);

	private Logger logger = Logger.getLogger(SearchQqRelationAction.class);
	
	public String searchQQFriendsByQq(){
		friendslist = searchQqRelationService.queryQqFriends(qq);
		return SUCCESS;
	}
	public String searchgGroupsByQq(){
		try {
			List<QqGroupsBeans> groups = searchQqRelationService.queryQqGroups(qq);
			String realName = searchQqRelationService.realNameWeigth(qq);
			searchQqRelationService.ReformGroups(groups, qq,realName, graph);
		} catch (Exception e) {
			logger.error("查询群组信息异常："+e.getMessage());
		}
		//用于去重
		List<Object> nodeIdList = new ArrayList<Object>();
		root = new HashMap<String,Object>();
		List<Map<String,Object>> nodeList = new ArrayList<Map<String,Object>>();
		List<Map<String,Object>> edgeList = new ArrayList<Map<String,Object>>();
		root.put("nodes", nodeList);
		root.put("edges", edgeList);
		List<List<Vertex>> titanGroup = searchQqRelationService.findGroupRelativeByqqNum(qq,graph);
		int source = -1;
		for (int j = 0; j < titanGroup.size(); j++) {
			List<Vertex> list = titanGroup.get(j);
			int size = list.size();
			String ownerqq = "";
			for (int i = 0; i < size; i++) {
				Vertex vertex = list.get(i);
				Object id = vertex.getId();
				Map<String, Object> nodeMap = new HashMap<String, Object>();
				nodeMap.put("id", vertex.getId());
				if (i == 0) {
					ownerqq = vertex.getProperty("ownerqq");
					nodeMap.put("num", vertex.getProperty("groupnum")); 
					nodeMap.put("image", "/scripts/img/QQqun.png");
					nodeMap.put("type", "group");
					try {
						nodeMap.put("createtime", simpleDateFormat.format(new Date(Long.parseLong(vertex.getProperty("createtime ")+"000"))));
					} catch (Exception e) {
						nodeMap.put("createtime", "");
					}
					nodeMap.put("ownerqq", vertex.getProperty("ownerqq"));
					nodeMap.put("groupname", vertex.getProperty("groupname"));
					nodeMap.put("groupdesc", vertex.getProperty("groupdesc "));
					nodeList.add(nodeMap);
					nodeIdList.add(id);
					source = nodeIdList.size()-1;
				}else {
					String numid = vertex.getProperty("numid");
					int index = nodeIdList.indexOf(id);
					if (index > -1) {
					}else {
						nodeMap.put("num", numid); 
						String[] values = vertex.getProperty("nickname");
						String nickname = getNickname(values);
						nodeMap.put("nickname", nickname);
						nodeMap.put("image", "/scripts/img/qq.png");
						nodeMap.put("type", "qq");
						nodeList.add(nodeMap);
						nodeIdList.add(id);
						index = nodeIdList.size()-1;
					}
					if (numid.equals(ownerqq)) {
						addLinkHandler(source, index, "groupOwner", "out", edgeList);
					}else {
						addLinkHandler(source, index, "qq", "out", edgeList);
					}
				}
			}
		}
		
		return SUCCESS;
	}
	
	public SearchQqRelationService getSearchQqRelationService() {
		return searchQqRelationService;
	}
	public void setSearchQqRelationService(
			SearchQqRelationService searchQqRelationService) {
		this.searchQqRelationService = searchQqRelationService;
	}
	public String getQq() {
		return qq;
	}
	public void setQq(String qq) {
		this.qq = qq;
	}
	public List<QQFriend> getFriendslist() {
		return friendslist;
	}
	public void setFriendslist(List<QQFriend> friendslist) {
		this.friendslist = friendslist;
	}
	
	public Map<String, Object> getRoot() {
		return root;
	}
	public void setRoot(Map<String, Object> root) {
		this.root = root;
	}
	private String getNickname(String[] values){
		if (values == null) {
			return "";
		}
		String nickname = "";
		for (String name : values) {
			nickname += name+" | ";
		}
		if (!"".equals(nickname)) {
			nickname = nickname.substring(0, nickname.length()-3);
		}
		return nickname;
	}
	
	private void addLinkHandler(long source,long target,String relation,String direction,List<Map<String,Object>> edgeList){
		Map<String, Object> linksMap = new HashMap<String, Object>();
		linksMap.put("source", source);
		linksMap.put("target", target);
		linksMap.put("relation", relation);
		linksMap.put("direction", direction);
		linksMap.put("uuid", UUID.randomUUID().toString().replaceAll("-", ""));
		edgeList.add(linksMap);
	}

	
	

}
