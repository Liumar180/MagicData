package com.integrity.lawCase.organizationManage.action;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.apache.struts2.ServletActionContext;
import org.apache.struts2.dispatcher.Dispatcher;

import com.integrity.lawCase.caseManage.bean.CaseObject;
import com.integrity.lawCase.common.ConstantManage;
import com.integrity.lawCase.fileManage.bean.FilesObject;
import com.integrity.lawCase.hostManage.bean.HostsObject;
import com.integrity.lawCase.organizationManage.bean.Organizationobject;
import com.integrity.lawCase.organizationManage.service.OrgEditService;
import com.integrity.lawCase.organizationManage.service.OrgInfoManageService;
import com.integrity.lawCase.peopleManage.bean.Documentnumberobject;
import com.integrity.lawCase.peopleManage.bean.Peopleobject;
import com.integrity.lawCase.peopleManage.bean.Peoplevirtualobject;
import com.integrity.lawCase.peopleManage.bean.Phonenumberobject;
import com.integrity.lawCase.relation.service.AllRelationService;
import com.integrity.lawCase.relation.wapper.AllRelationWapper;
import com.integrity.lawCase.util.FilesToZip;
import com.integrity.lawCase.util.Java2word;
import com.integrity.login.bean.User;
import com.integrity.login.service.UserService;
import com.opensymphony.xwork2.ActionSupport;

public class OrgEditManagerAjaxAction extends ActionSupport {
	
	private static final long serialVersionUID = 1L;
	private Logger logger = Logger.getLogger(OrgEditManagerAjaxAction.class);
	
	private OrgEditService orgEditService;
	/**关联关系Service*/
	private AllRelationService allRelationService;
	private String id;
	private String ids;
	private String relationType;
	private String relationId;
	private Organizationobject orgObj;
	private List<Organizationobject> orgList;
	private OrgInfoManageService orgInfoManageService;
	/**图片上传*/
	private File orgImg;
	private String orgImgFileName;
	private String orgImgFileContentType;
	private String imgTimeNum;
	/**文件打包工具*/
	FilesToZip filesToZip=new FilesToZip();
	private InputStream inputStream;
	private UserService userService;
	/**
	 * 删除多个组织及其关联对象(用于列表删除)
	 * @return
	 */
	public String deleteOrgs(){
		try {
			orgEditService.deteleOrgs(ids);
		} catch (Exception e) {
			logger.error("删除多个组织及其关联对象异常",e);
		}
		return SUCCESS;
	}

	/**
	 * 删除关联对象
	 */
	public String deleteOrgRelation(){
		try {
			allRelationService.delRelation(id, ConstantManage.ORGANIZATIONOBJECTTYPE, relationId, relationType);
		} catch (Exception e) {
			logger.error("删除组织的关联对象异常",e);
		}
		return SUCCESS;
	}
	
	/**
	 * 根据name模糊查询案件
	 */
	public String findOrgsByName(){
		try {
			String name = orgObj.getOrgCName();
			Long id = orgObj.getId();
			if(StringUtils.isNotEmpty(name)){
				orgList = orgInfoManageService.findCaseByName(name, id);
			}
		} catch (Exception e) {
			logger.error("修改配置异常",e);
		}
		return SUCCESS;
	}

	
	/**
	 * 添加组织
	 */
	public String saveOrg(){
		try {
			HttpServletRequest request = ServletActionContext.getRequest();		
			HttpSession hs = request.getSession();
			String currentUserName = String.valueOf(hs.getAttribute("username"));
			orgObj.setOrgInputPersonId(currentUserName);//保存录入人
			
			String orgImg = orgObj.getOrgImage();
			if(null!=orgImg&&!"".equals(orgImg.trim())){
				String subFile = orgImg.substring(orgImg.indexOf("."), orgImg.length());
				String newFileName = "Org"+imgTimeNum+subFile;
				orgObj.setOrgImage(newFileName);
			}
			
			orgEditService.saveOrg(orgObj);
		} catch (Exception e) {
			logger.error("添加组织异常",e);
		}
		return SUCCESS;
	}
	
	/**
	 * 修改组织对象
	 */
	public String updateOrg(){
		try {
			String orgImg = orgObj.getOrgImage();
			if(null!=orgImg&&!"".equals(orgImg.trim())){
				String subFile = orgImg.substring(orgImg.indexOf("."), orgImg.length());
				String newFileName = "Org"+imgTimeNum+subFile;
				orgObj.setOrgImage(newFileName);
			}
			orgEditService.updateOrg(orgObj);
		} catch (Exception e) {
			logger.error("修改组织异常",e);
		}
		return SUCCESS;
	}

	/**
	 * 上传组织图片
	 * @return
	 */
	public String saveOrgImg(){
		try{
			String imgDir = ServletActionContext.getServletContext().getRealPath("/images/lawCase/uploadImg/organization/");
			System.out.println(imgDir);
			File imgDirFile = new File(imgDir); // 判断文件夹是否存在,如果不存在则创建文件夹
	        if (!imgDirFile.exists()) {
	        	imgDirFile.mkdirs();
	        }
			if(null!=orgImg&&null!=orgImgFileName){
				if(null==imgTimeNum&&"".equals(imgTimeNum.trim())){
					imgTimeNum = "";
				}
				String[] fileFit = new String[] { ".jpg",".png",".gif",".jpeg",".bmp" };
				boolean fitFlag = false;
				for (int i = 0; i < fileFit.length; i++) {
	                if (orgImgFileName.toLowerCase().endsWith(fileFit[i])) {
	                	fitFlag = true;
	                    break;
	                }
	            }
				if(fitFlag){
					InputStream is = new FileInputStream(orgImg);
					String subFile = orgImgFileName.substring(orgImgFileName.indexOf("."), orgImgFileName.length());
					String newFileName = "Org"+imgTimeNum+subFile;
			        File saveImg = new File(imgDir,newFileName);
			        if(!saveImg.exists()){
			        	saveImg.createNewFile();
			        	OutputStream os = new FileOutputStream(saveImg);	        
				        byte[] buffer = new byte[1024];
				        int length = 0;
			            while ((length = is.read(buffer)) != -1) {
			                os.write(buffer, 0, length);
			            }
				        os.close();
				        is.close();
			        }
				}
			}
		}catch (Exception e) {
			logger.error("添加照片异常",e);
		}
		return SUCCESS;
	}
	/**
	 * 导出组织
	 * @return
	 */
	public String exportOrganization(){
		 HashMap data = new HashMap();
		 Organizationobject oo=new Organizationobject();
		 StringBuffer sb=new StringBuffer();
		 StringBuffer sb1=new StringBuffer();
		 Java2word j2w = new Java2word();
		 User user=new User();
		 File file=new File(ServletActionContext.getServletContext().getRealPath("/")+"images\\exportFile\\organizationM\\exorganization");    
		 if  (!file .exists()  && !file .isDirectory()){       
			    file .mkdir();    
			 }
		 deleteDir(new File(ServletActionContext.getServletContext().getRealPath("/")+"images\\exportFile\\organizationM\\exorganization") );
		 if  (!file .exists()  && !file .isDirectory()){       
			    file .mkdir();    
			 }
		 //j2w
		 for (int i = 0; i < ids.split(",").length; i++) {
			//查询People信息
			 oo=orgInfoManageService.findOrgById(Long.valueOf(ids.split(",")[i]));
				//创建文件DOC
			 try {
				j2w.createDoc(ServletActionContext.getServletContext().getRealPath("/")+"images\\exportFile\\organizationM\\exorganization\\organization"+i+".doc");
			} catch (Exception e) {
				logger.error("创建DOC失败-导出功能",e);
				e.printStackTrace();
			}
				//注入
			 data.put("$createTime$",oo.getCreateTime().toString());
			 data.put("$orgAlias$",j2w.exUtilS(oo.getOrgAlias()));
			 data.put("$orgCName$",j2w.exUtilS(oo.getOrgCName()));
			 data.put("$orgControlStatus$",CONTROLSTATUS.get(oo.getOrgControlStatus()));
			 data.put("$orgDescription$",j2w.exUtilS(oo.getOrgDescription()));
			 for (String object : oo.getOrgDirectionCodes().split(",")) {
					sb.append(DIRECTION.get(object)+",");
				}
			 data.put("$orgDirectionCodes$",sb.toString());
			 if(oo.getOrgDutyPersonIds()!=null&&oo.getOrgDutyPersonIds()!=""&&!"".equals(oo.getOrgDutyPersonIds())){
				 for (String object : oo.getOrgDutyPersonIds().split(",")) {
					 	user=new User();
					 	user.setId(Long.valueOf(object));
					 	object=userService.findUserById(user).getName();
					 	if(object!=null){
					 		sb1.append(userService.findUserById(user).getName()+",");
					 	}
					}
			 }
			 data.put("$orgDutyPersonIds$",sb1.toString());
			 data.put("$orgEName$",j2w.exUtilS(oo.getOrgEName()));
			 data.put("$orgImportLevel$",LEVEL.get(oo.getOrgImportLevel()));
			 data.put("$orgInputPersonID$",oo.getOrgInputPersonId());
			 data.put("$orgLocation$",j2w.exUtilS(oo.getOrgLocation()));
			 data.put("$orgRemark$",j2w.exUtilS(oo.getOrgRemark()));
			 data.put("$orgSpell$",j2w.exUtilS(oo.getOrgSpell()));
			 data.put("$orgStatus$",ORGSTATUS.get(oo.getOrgStatus()));
			 data.put("$orgImage$",ServletActionContext.getServletContext().getRealPath("/")+"images\\lawCase\\moren\\organaization.jpg");
			//关联对象详细
			 AllRelationWapper allRelation = allRelationService.getAllRelationForType(Long.valueOf(ids.split(",")[i])+"", ConstantManage.ORGANIZATIONOBJECTTYPE);
			 if(allRelation!=null){
					//相关案件
					 StringBuffer table4=new StringBuffer();
					 if(allRelation.getCaseList()!=null&&allRelation.getCaseList().size()>0){
						 for (CaseObject co : allRelation.getCaseList()) {
							 table4.append(j2w.exUtilS(co.getCaseName())+"	");
						}
					 }
					 data.put("$castlist$",table4.toString());
					//相关组织
					 StringBuffer table5=new StringBuffer();
					 if(allRelation.getOrganList()!=null&&allRelation.getOrganList().size()>0){
						 for (Organizationobject oo1 : allRelation.getOrganList()) {
							 table5.append(j2w.exUtilS(oo1.getOrgCName())+"	");
						}
					 }
					 data.put("$organazationlist$",table5.toString());
					//相关人员
					 StringBuffer table6=new StringBuffer();
					 if(allRelation.getPeopleList()!=null&&allRelation.getPeopleList().size()>0){
						 for (Peopleobject p : allRelation.getPeopleList()) {
							 table6.append(j2w.exUtilS(p.getPocnname())+"	");
						}
					 }
					 data.put("$peoplelist$",table6.toString());
					//相关文件
					 StringBuffer table7=new StringBuffer();
					 if(allRelation.getFileList()!=null&&allRelation.getFileList().size()>0){
						 for (FilesObject f : allRelation.getFileList()) {
							 table7.append(j2w.exUtilS(f.getFileName())+"	");
						}
					 }
					 data.put("$filelist$",table7.toString());
					//相关主机
					 StringBuffer table8=new StringBuffer();
					 if(allRelation.getHostList()!=null&&allRelation.getHostList().size()>0){
						 for (HostsObject h : allRelation.getHostList()) {
							 table8.append(j2w.exUtilS(h.getHostName())+"	");
						}
					 }
					 data.put("$hostlist$",table8.toString());
				 }else{
					 data.put("$castlist$","");
					 data.put("$organazationlist$","");
					 data.put("$peoplelist$","");
					 data.put("$filelist$","");
					 data.put("$hostlist$","");
				 }
			 
			 j2w = new Java2word();
			 j2w.toWord(ServletActionContext.getServletContext().getRealPath("/")+"images\\exportFile\\organizationM\\OrganizationEx.xml",ServletActionContext.getServletContext().getRealPath("/")+"images\\exportFile\\organizationM\\exorganization\\organization"+i+".doc",data);
		 }
		 filesToZip.fileToZip(ServletActionContext.getServletContext().getRealPath("/")+"images\\exportFile\\organizationM\\exorganization\\", ServletActionContext.getServletContext().getRealPath("/")+"images\\exportFile\\organizationM\\exorganization\\", "Organizations");
		 try {
				inputStream = new ByteArrayInputStream("success".getBytes("utf-8"));
			} catch (UnsupportedEncodingException e) {
				e.printStackTrace();
			}
		 return SUCCESS;
	}
	private ServletContext sc = ServletActionContext.getServletContext();
	Map<String,Map<String,String>> allMap = (Map<String, Map<String, String>>) sc.getAttribute(ConstantManage.DATADICTIONARY);
	Map<String,String> DIRECTION = allMap.get(ConstantManage.DIRECTION);//方向
	Map<String,String> LEVEL = allMap.get(ConstantManage.LEVEL);//等级
	Map<String,String> ORGSTATUS = allMap.get(ConstantManage.ORGSTATUS);
	Map<String,String> CONTROLSTATUS = allMap.get(ConstantManage.CONTROLSTATUS);
	/**
     * 递归删除目录下的所有文件及子目录下所有文件
     * @param dir 将要删除的文件目录
     * @return boolean Returns "true" if all deletions were successful.
     *                 If a deletion fails, the method stops attempting to
     *                 delete and returns "false".
     */
    private static boolean deleteDir(File dir) {
        if (dir.isDirectory()) {
            String[] children = dir.list();
            for (int i=0; i<children.length; i++) {
                boolean success = deleteDir(new File(dir, children[i]));
                if (!success) {
                    return false;
                }
            }
        }
        // 目录此时为空，可以删除
        return dir.delete();
    }

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public String getIds() {
		return ids;
	}

	public void setIds(String ids) {
		this.ids = ids;
	}

	public String getRelationType() {
		return relationType;
	}

	public void setRelationType(String relationType) {
		this.relationType = relationType;
	}

	public String getRelationId() {
		return relationId;
	}

	public void setRelationId(String relationId) {
		this.relationId = relationId;
	}

	public void setOrgEditService(OrgEditService orgEditService) {
		this.orgEditService = orgEditService;
	}

	public void setAllRelationService(AllRelationService allRelationService) {
		this.allRelationService = allRelationService;
	}

	public Organizationobject getOrgObj() {
		return orgObj;
	}

	public void setOrgObj(Organizationobject orgObj) {
		this.orgObj = orgObj;
	}

	public List<Organizationobject> getOrgList() {
		return orgList;
	}

	public void setOrgList(List<Organizationobject> orgList) {
		this.orgList = orgList;
	}

	public void setOrgInfoManageService(OrgInfoManageService orgInfoManageService) {
		this.orgInfoManageService = orgInfoManageService;
	}

	/*public File getOrgImg() {
		return orgImg;
	}*/

	public void setOrgImg(File orgImg) {
		this.orgImg = orgImg;
	}

	public String getOrgImgFileName() {
		return orgImgFileName;
	}

	public void setOrgImgFileName(String orgImgFileName) {
		this.orgImgFileName = orgImgFileName;
	}

	public String getOrgImgFileContentType() {
		return orgImgFileContentType;
	}

	public void setOrgImgFileContentType(String orgImgFileContentType) {
		this.orgImgFileContentType = orgImgFileContentType;
	}

	public String getImgTimeNum() {
		return imgTimeNum;
	}

	public void setImgTimeNum(String imgTimeNum) {
		this.imgTimeNum = imgTimeNum;
	}

	/*public UserService getUserService() {
		return userService;
	}*/

	public void setUserService(UserService userService) {
		this.userService = userService;
	}

	public InputStream getInputStream() {
		return inputStream;
	}

	public void setInputStream(InputStream inputStream) {
		this.inputStream = inputStream;
	}

}
