package com.integrity.dataSmart.dataImport.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.integrity.dataSmart.util.jsonUtil.JacksonMapperUtil;

/**
 * 获取Titan结构工具类
 * @author RenSx
 *
 */
public class TitanStructureUtil {
	
	private static String savePath = TitanStructureUtil.class.getResource("/").getFile().replace("/classes", "")+"config/titanStru.txt";
	
	public static List<Map<String,Object>> createTitanStructure(){
		/*  list中有两个元素 
	 	第一个为点的Map(key为节点的类型（type），value为节点的属性Map（key为属性名称，value为属性值类型标识；如果没有属性则为空map）)
	 	第二个为边的Map(key为边的标签（label），value为边的属性Map（key为属性名称，value为属性值类型标识；如果没有属性则为空map）)
		*/
		List<Map<String,Object>> list = new ArrayList<Map<String,Object>>();
		//点集合
		Map<String, Object> vertex = new HashMap<String,Object>();
		//边集合
		Map<String, Object> edge = new HashMap<String,Object>();
		//默认显示值
		Map<String, Object> showAttr = new HashMap<String,Object>();
		
		list.add(vertex);
		list.add(edge);
		list.add(showAttr);

		//Person
		List<Map<String,Object>> vertex_Person = new ArrayList<Map<String,Object>>();
		Map<String,Object> name = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(name, "name", DataType.STRING.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsTrue(),DataType.CARDINALITY.getSingle());
		vertex_Person.add(name);
		Map<String,Object> idcard = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(idcard, "idcard", DataType.STRING.getValue(), DataType.STRONG.getIsTrue(),DataType.INDEX.getIsTrue(),DataType.CARDINALITY.getSingle());
		vertex_Person.add(idcard);
		Map<String,Object> country = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(country, "country", DataType.STRING.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsFalse(),DataType.CARDINALITY.getSingle());
		vertex_Person.add(country);
		Map<String,Object> sex = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(sex, "sex", DataType.STRING.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsFalse(),DataType.CARDINALITY.getSingle());
		vertex_Person.add(sex);
		Map<String,Object> birthday = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(birthday,"birthday", DataType.STRING.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsFalse(),DataType.CARDINALITY.getSingle());
		vertex_Person.add(birthday);
		vertex.put("Person",vertex_Person);
		List<String> attr_Person = new ArrayList<String>();
		attr_Person.add("name");
		attr_Person.add("idcard");
		showAttr.put("Person", attr_Person);
		//Phone
		List<Map<String,Object>> vertex_Phone = new ArrayList<Map<String,Object>>();
		Map<String,Object> model = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(model,"model", DataType.STRING.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsFalse(),DataType.CARDINALITY.getSingle());
		vertex_Phone.add(model);
		Map<String,Object> phonenum = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(phonenum,"phonenum", DataType.STRING.getValue(), DataType.STRONG.getIsTrue(),DataType.INDEX.getIsTrue(),DataType.CARDINALITY.getSingle());
		vertex_Phone.add(phonenum);
		vertex.put("Phone", vertex_Phone);
		List<String> attr_Phone = new ArrayList<String>();
		attr_Phone.add("phonenum");
		attr_Phone.add("model");
		showAttr.put("Phone", attr_Phone);
		//Resume
		List<Map<String,Object>> vertex_Resume = new ArrayList<Map<String,Object>>();
		Map<String,Object> title = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(title, "title", DataType.STRING.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsFalse(),DataType.CARDINALITY.getSingle());
		vertex_Resume.add(title);
		Map<String,Object> keywords = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(keywords, "keywords", DataType.STRING.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsFalse(),DataType.CARDINALITY.getSingle());
		vertex_Resume.add(keywords);
		Map<String,Object> time = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(time, "time", DataType.LONG.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsFalse(),DataType.CARDINALITY.getSingle());
		vertex_Resume.add(time);
		vertex.put("Resume", vertex_Resume);
		List<String> attr_Resume = new ArrayList<String>();
		attr_Resume.add("title");
		attr_Resume.add("keywords");
		showAttr.put("Resume", attr_Resume);
		//Account
		List<Map<String,Object>> vertex_Account = new ArrayList<Map<String,Object>>();
		Map<String,Object> domain = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(domain, "domain", DataType.STRING.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsTrue(),DataType.CARDINALITY.getSingle());
		vertex_Account.add(domain);
		Map<String,Object> uid = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(uid, "uid", DataType.STRING.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsFalse(),DataType.CARDINALITY.getSingle());
		vertex_Account.add(uid);
		Map<String,Object> username = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(username, "username", DataType.STRING.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsTrue(),DataType.CARDINALITY.getSingle());
		vertex_Account.add(username);
		Map<String,Object> password = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(password, "password", DataType.STRING.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsTrue(),DataType.CARDINALITY.getSingle());
		vertex_Account.add(password);
		Map<String,Object> email = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(email, "email", DataType.STRING.getValue(), DataType.STRONG.getIsTrue(),DataType.INDEX.getIsTrue(),DataType.CARDINALITY.getSingle());
		vertex_Account.add(email);
		Map<String,Object> createtime = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(createtime, "createtime", DataType.LONG.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsFalse(),DataType.CARDINALITY.getSingle());
		vertex_Account.add(createtime);
		Map<String,Object> phone = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(phone, "phonenum", DataType.STRING.getValue(), DataType.STRONG.getIsTrue(),DataType.INDEX.getIsTrue(),DataType.CARDINALITY.getSingle());
		vertex_Account.add(phone);
		Map<String,Object> regip = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(regip, "regip", DataType.STRING.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsFalse(),DataType.CARDINALITY.getSingle());
		vertex_Account.add(regip);
		Map<String,Object> question = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(question, "question", DataType.STRING.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsFalse(),DataType.CARDINALITY.getSingle());
		vertex_Account.add(question);
		vertex.put("Account", vertex_Account);
		List<String> attr_Account = new ArrayList<String>();
		attr_Account.add("username");
		attr_Account.add("phonenum");
		showAttr.put("Account", attr_Account);
		//Email
		List<Map<String,Object>> vertex_Email = new ArrayList<Map<String,Object>>();
		Map<String,Object> email1 = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(email1, "email", DataType.STRING.getValue(), DataType.STRONG.getIsTrue(),DataType.INDEX.getIsTrue(),DataType.CARDINALITY.getSingle());
		vertex_Email.add(email1);
		Map<String,Object> password1 = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(password1, "password", DataType.STRING.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsFalse(),DataType.CARDINALITY.getSingle());
		vertex_Email.add(password1);
		vertex.put("Email", vertex_Email);
		List<String> attr_Email = new ArrayList<String>();
		attr_Email.add("email");
		showAttr.put("Email", attr_Email);
		//Location
		List<Map<String,Object>> vertex_Location = new ArrayList<Map<String,Object>>();
		Map<String,Object> address = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(address, "address", DataType.STRING.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsFalse(),DataType.CARDINALITY.getSingle());
		vertex_Location.add(address);
		Map<String,Object> place = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(place, "place", DataType.STRING.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsFalse(),DataType.CARDINALITY.getSingle());
		vertex_Location.add(place);
		vertex.put("Location", vertex_Location);
		List<String> attr_Location = new ArrayList<String>();
		attr_Location.add("address");
		attr_Location.add("place");
		showAttr.put("Location", attr_Location);
		//IM
		List<Map<String,Object>> vertex_IM = new ArrayList<Map<String,Object>>();
		Map<String,Object> domain1 = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(domain1, "domain", DataType.STRING.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsTrue(),DataType.CARDINALITY.getSingle());
		vertex_IM.add(email1);
		Map<String,Object> numid = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(numid, "numid", DataType.STRING.getValue(), DataType.STRONG.getIsTrue(),DataType.INDEX.getIsTrue(),DataType.CARDINALITY.getSingle());
		vertex_IM.add(numid);
		Map<String,Object> nickname = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(nickname, "nickname", DataType.ARRAY.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsFalse(),DataType.CARDINALITY.getSingle());
		vertex_IM.add(nickname);
		vertex.put("IM", vertex_IM);
		List<String> attr_IM = new ArrayList<String>();
		attr_IM.add("numid");
		attr_IM.add("nickname");
		showAttr.put("IM", attr_IM);
		//Group
		List<Map<String,Object>> vertex_Group = new ArrayList<Map<String,Object>>();
		Map<String,Object> groupnum = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(groupnum, "groupnum", DataType.STRING.getValue(), DataType.STRONG.getIsTrue(),DataType.INDEX.getIsTrue(),DataType.CARDINALITY.getSingle());
		vertex_Group.add(groupnum);
		Map<String,Object> createtime1 = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(createtime1, "createtime", DataType.LONG.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsFalse(),DataType.CARDINALITY.getSingle());
		vertex_Group.add(createtime1);
		Map<String,Object> ownerqq = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(ownerqq, "ownerqq", DataType.STRING.getValue(), DataType.STRONG.getIsTrue(),DataType.INDEX.getIsTrue(),DataType.CARDINALITY.getSingle());
		vertex_Group.add(ownerqq);
		Map<String,Object> groupname = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(groupname, "groupname", DataType.STRING.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsTrue(),DataType.CARDINALITY.getSingle());
		vertex_Group.add(groupname);
		Map<String,Object> groupdesc = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(groupdesc, "groupdesc", DataType.STRING.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsFalse(),DataType.CARDINALITY.getSingle());
		vertex_Group.add(groupdesc);
		vertex.put("Group",vertex_Group);
		List<String> attr_Group = new ArrayList<String>();
		attr_Group.add("groupnum");
		attr_Group.add("groupname");
		showAttr.put("Group", attr_Group);
		//CallEvent
		List<Map<String,Object>> vertex_CallEvent = new ArrayList<Map<String,Object>>();
		Map<String,Object> from = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(from, "from", DataType.STRING.getValue(), DataType.STRONG.getIsTrue(),DataType.INDEX.getIsFalse(),DataType.CARDINALITY.getSingle());
		vertex_CallEvent.add(from);
		Map<String,Object> to = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(to, "to", DataType.STRING.getValue(), DataType.STRONG.getIsTrue(),DataType.INDEX.getIsFalse(),DataType.CARDINALITY.getSingle());
		vertex_CallEvent.add(to);
		Map<String,Object> time1 = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(time1, "time", DataType.LONG.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsFalse(),DataType.CARDINALITY.getSingle());
		vertex_CallEvent.add(time1);
		Map<String,Object> Long = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(Long, "long", DataType.LONG.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsFalse(),DataType.CARDINALITY.getSingle());
		vertex_CallEvent.add(Long);
		vertex.put("CallEvent",vertex_CallEvent);
		List<String> attr_CallEvent = new ArrayList<String>();
		attr_CallEvent.add("from");
		attr_CallEvent.add("to");
		showAttr.put("CallEvent", attr_CallEvent);
		//LoginEvent
		List<Map<String,Object>> vertex_LoginEvent = new ArrayList<Map<String,Object>>();
		Map<String,Object> domain2 = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(domain2, "domain", DataType.STRING.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsTrue(),DataType.CARDINALITY.getSingle());
		vertex_LoginEvent.add(domain2);
		Map<String,Object> username1 = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(username1, "username", DataType.STRING.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsFalse(),DataType.CARDINALITY.getSingle());
		vertex_LoginEvent.add(username1);
		Map<String,Object> ip = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(ip, "ip", DataType.STRING.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsFalse(),DataType.CARDINALITY.getSingle());
		vertex_LoginEvent.add(ip);
		Map<String,Object> time2 = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(time2, "time", DataType.LONG.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsFalse(),DataType.CARDINALITY.getSingle());
		vertex_LoginEvent.add(time2);
		vertex.put("LoginEvent",vertex_LoginEvent);
		List<String> attr_LoginEvent = new ArrayList<String>();
		attr_LoginEvent.add("domain");
		attr_LoginEvent.add("username");
		showAttr.put("LoginEvent", attr_LoginEvent);
		//EmailEvent
		List<Map<String,Object>> vertex_EmailEvent = new ArrayList<Map<String,Object>>();
		Map<String,Object> title1 = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(title1, "title", DataType.STRING.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsFalse(),DataType.CARDINALITY.getSingle());
		vertex_EmailEvent.add(title1);
		Map<String,Object> content = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(content, "content", DataType.STRING.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsFalse(),DataType.CARDINALITY.getSingle());
		vertex_EmailEvent.add(content);
		Map<String,Object> from1 = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(from1, "from", DataType.STRING.getValue(), DataType.STRONG.getIsTrue(),DataType.INDEX.getIsFalse(),DataType.CARDINALITY.getSingle());
		vertex_EmailEvent.add(from1);
		Map<String,Object> to1 = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(to1, "to", DataType.STRING.getValue(), DataType.STRONG.getIsTrue(),DataType.INDEX.getIsFalse(),DataType.CARDINALITY.getSingle());
		vertex_EmailEvent.add(to1);
		Map<String,Object> time3 = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(time3, "time", DataType.LONG.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsFalse(),DataType.CARDINALITY.getSingle());
		vertex_EmailEvent.add(time3);
		Map<String,Object> messageId = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(messageId, "messageId", DataType.STRING.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsFalse(),DataType.CARDINALITY.getSingle());
		vertex_EmailEvent.add(messageId);
		vertex.put("EmailEvent", vertex_EmailEvent);
		List<String> attr_EmailEvent = new ArrayList<String>();
		attr_EmailEvent.add("title");
		showAttr.put("EmailEvent", attr_EmailEvent);
		//StayEvent
		List<Map<String,Object>> vertex_StayEvent = new ArrayList<Map<String,Object>>();
		Map<String,Object> hotelid = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(hotelid, "hotelid", DataType.STRING.getValue(), DataType.STRONG.getIsTrue(),DataType.INDEX.getIsTrue(),DataType.CARDINALITY.getSingle());
		vertex_StayEvent.add(hotelid);
		Map<String,Object> hotelname = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(hotelname, "hotelname", DataType.STRING.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsFalse(),DataType.CARDINALITY.getSingle());
		vertex_StayEvent.add(hotelname);
		Map<String,Object> orderno = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(orderno, "orderno", DataType.STRING.getValue(), DataType.STRONG.getIsTrue(),DataType.INDEX.getIsTrue(),DataType.CARDINALITY.getSingle());
		vertex_StayEvent.add(orderno);
		Map<String,Object> arrivedate = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(arrivedate, "arrivedate", DataType.LONG.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsTrue(),DataType.CARDINALITY.getSingle());
		vertex_StayEvent.add(arrivedate);
		Map<String,Object> departuredate = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(departuredate, "departuredate", DataType.LONG.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsTrue(),DataType.CARDINALITY.getSingle());
		vertex_StayEvent.add(departuredate);
		Map<String,Object> roomno = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(roomno, "roomno", DataType.STRING.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsFalse(),DataType.CARDINALITY.getSingle());
		vertex_StayEvent.add(roomno);
		Map<String,Object> hotelflag = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(hotelflag, "hotelflag", DataType.STRING.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsTrue(),DataType.CARDINALITY.getSingle());
		vertex_StayEvent.add(hotelflag);
		vertex.put("StayEvent", vertex_StayEvent);
		List<String> attr_StayEvent = new ArrayList<String>();
		attr_StayEvent.add("hotelname");
		showAttr.put("StayEvent", attr_StayEvent);
		//own
		List<Map<String,Object>> edge_own = new ArrayList<Map<String,Object>>();
		Map<String,Object> own = new HashMap<String,Object>();
		/*TitanStructureUtil.toSetMapValue(own, "own", DataType.STRING.getValue(), DataType.STRONG.getIsTrue(),DataType.INDEX.getIsFalse());*/
		edge_own.add(own);
		edge.put("own",edge_own);
		//callfrom
		List<Map<String,Object>> edge_callfrom = new ArrayList<Map<String,Object>>();
		Map<String,Object> eventtime = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(eventtime, "eventtime", DataType.LONG.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsTrue(),DataType.CARDINALITY.getSingle());
		edge_callfrom.add(eventtime);
		edge.put("callfrom",edge_callfrom);
		//callto
		List<Map<String,Object>> edge_callto = new ArrayList<Map<String,Object>>();
		Map<String,Object> eventtime1 = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(eventtime1, "eventtime", DataType.LONG.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsTrue(),DataType.CARDINALITY.getSingle());
		edge_callto.add(eventtime1);
		edge.put("callto",edge_callto);
		//login
		List<Map<String,Object>> edge_login = new ArrayList<Map<String,Object>>();
		Map<String,Object> eventtime2 = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(eventtime2, "eventtime", DataType.LONG.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsTrue(),DataType.CARDINALITY.getSingle());
		edge_login.add(eventtime2);
		edge.put("login", edge_login);
		//emailfrom
		List<Map<String,Object>> edge_emailfrom = new ArrayList<Map<String,Object>>();
		Map<String,Object> eventtime3 = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(eventtime3, "eventtime", DataType.LONG.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsTrue(),DataType.CARDINALITY.getSingle());
		edge_emailfrom.add(eventtime3);
		edge.put("emailfrom", edge_emailfrom);
		//emailto
		List<Map<String,Object>> edge_emailto = new ArrayList<Map<String,Object>>();
		Map<String,Object> eventtime4 = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(eventtime4, "eventtime", DataType.LONG.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsTrue(),DataType.CARDINALITY.getSingle());
		edge_emailto.add(eventtime4);
		edge.put("emailto", edge_emailto);
		//emailcc
		List<Map<String,Object>> edge_emailcc = new ArrayList<Map<String,Object>>();
		Map<String,Object> eventtime5 = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(eventtime5, "eventtime", DataType.LONG.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsTrue(),DataType.CARDINALITY.getSingle());
		edge_emailcc.add(eventtime5);
		edge.put("emailcc", edge_emailcc);
		//relational
		List<Map<String,Object>> edge_relational = new ArrayList<Map<String,Object>>();
		Map<String,Object> relationtype = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(relationtype, "relationtype", DataType.STRING.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsTrue(),DataType.CARDINALITY.getSingle());
		edge_relational.add(relationtype);
		Map<String,Object> nickname1 = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(nickname1, "nickname", DataType.STRING.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsFalse(),DataType.CARDINALITY.getSingle());
		edge_relational.add(nickname1);
		edge.put("relational", edge_relational);
		//stay
		List<Map<String,Object>> edge_stay = new ArrayList<Map<String,Object>>();
		Map<String,Object> eventtime6 = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(eventtime6, "eventtime", DataType.LONG.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsTrue(),DataType.CARDINALITY.getSingle());
		edge_stay.add(eventtime6);
		edge.put("stay", edge_stay);
		//cohabit
		List<Map<String,Object>> edge_cohabit = new ArrayList<Map<String,Object>>();
		Map<String,Object> cohabit = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(cohabit, "cohabit", DataType.STRING.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsFalse(),DataType.CARDINALITY.getSingle());
		edge_cohabit.add(cohabit);
		edge.put("cohabit", edge_cohabit);
		//group
		List<Map<String,Object>> edge_group = new ArrayList<Map<String,Object>>();
		Map<String,Object> grouptype = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(grouptype, "grouptype", DataType.STRING.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsTrue(),DataType.CARDINALITY.getSingle());
		edge_group.add(grouptype);
		Map<String,Object> nickname2 = new HashMap<String,Object>();
		TitanStructureUtil.toSetMapValue(nickname2, "nickname", DataType.STRING.getValue(), DataType.STRONG.getIsFalse(),DataType.INDEX.getIsFalse(),DataType.CARDINALITY.getSingle());
		edge_group.add(nickname2);
		edge.put("group",edge_group);
		try {
			File f = new File(savePath);
			if(!f.exists()){
				f.createNewFile();
			}
			ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(f));
			oos.writeObject(list);
			oos.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		/*try {
			String json = JacksonMapperUtil.getObjectMapper().writeValueAsString(list);
			list = JacksonMapperUtil.getObjectMapper().readValue(json, list.getClass());
		}  catch (Exception e) {
			e.printStackTrace();
		}*/
		/*try{
			String json = JacksonMapperUtil.getObjectMapper().writeValueAsString(vertex_Person);
			System.out.println(json);
		}catch(Exception e){
			e.printStackTrace();
		}*/
		return list;
	}
	
	public static void toSetMapValue(Map<String,Object> map,String name,Object type,String strong,String index,String cardinality) {
		map.put("name", name);//名称
		map.put("type", type);//类型
		map.put("strong",strong);//是否是强属性(1:是,0:否)
		map.put("index", index);//是否为索引(1:是,0:否)
		map.put("cardinality", cardinality);//基数(三个值single,set,list)
	}
	
	/**
	 * 获取titan结构
	 * @return List<Map<String,Object>>
	 */
	public static List<Map<String,Object>> getTitanStructure(){
		File f = new File(savePath);
		if(!f.exists()){
			createTitanStructure();
		}
		ObjectInputStream ois = null;
		List<Map<String,Object>> list = new ArrayList<Map<String,Object>>();
		try {
			ois = new ObjectInputStream(new FileInputStream(f));
			list = (List<Map<String,Object>>)ois.readObject();
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			ois.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return list;
	}
	
	/**
	 * 添加titan节点，传递参数为fullJson（整个json串）
	 * @param fullJson
	 * @param result
	 * @return boolean
	 */
	public static boolean addTitanVertexFull(String fullJson) {
		File f = new File(savePath);
		List<Map<String,Object>> list = new ArrayList<Map<String,Object>>();
		try {
			if(f.exists()){
				f.delete();
				f.createNewFile();
			}
			list = JacksonMapperUtil.getObjectMapper().readValue(fullJson, list.getClass());
			ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(f));
			oos.writeObject(list);
			oos.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return true;
	}
	
	/**
	 * 添加vertex节点
	 * @param vertexName
	 * @param vertexJson
	 * @return List<Map<String,Object>>
	 */
	public static List<Map<String,Object>> addTitanVertex(String vertexName,String vertexJson){
		List<Map<String,Object>> l = null;
		List<Map<String,Object>> list = new ArrayList<Map<String,Object>>();
		try {
			//先把前台传回来的json转换为list节点
			list = JacksonMapperUtil.getObjectMapper().readValue(vertexJson, list.getClass());
			File f = new File(savePath);
			if(!f.exists()){
				f.createNewFile();
			}
			if(f.length()>0){
				//文件原来就存在，把文件反序列化为l,然后把添加的节点加到l里
				ObjectInputStream ois = new ObjectInputStream(new FileInputStream(f));
				l = (List<Map<String,Object>>)ois.readObject();
				Map<String, Object> map = l.get(0);
				map.put(vertexName, list);
				ois.close();
			}else{
				//文件是新建的，new一个l，把添加的节点放到l里
				l = new ArrayList<Map<String,Object>>();
				Map<String, Object> map = new HashMap<String,Object>();
				map.put(vertexName, list);
				l.add(map);
			}
			//把新的集合l序列化放到config下
			ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(f));
			oos.writeObject(l);
			oos.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return l;
	}
	/**
	 * 修改vertex节点（其实跟添加一样）
	 * @param vertexName
	 * @param vertexJson
	 * @return List<Map<String,Object>>
	 */
	public static List<Map<String,Object>> updateTitanVertex(String vertexName,String vertexJson){
		List<Map<String,Object>> l = null;
		List<Map<String,Object>> list = new ArrayList<Map<String,Object>>();
		try{
			list = JacksonMapperUtil.getObjectMapper().readValue(vertexJson, list.getClass());
			File f = new File(savePath);
			if(!f.exists()){
				f.createNewFile();
			}
			if(f.length()>0){
				ObjectInputStream ois = new ObjectInputStream(new FileInputStream(f));
				l = (List<Map<String,Object>>)ois.readObject();
				Map<String,Object> map = l.get(0);
				map.put(vertexName, list);
				ois.close();
			}else{
				l = new ArrayList<Map<String,Object>>();
				Map<String,Object> map = new HashMap<String,Object>();
				map.put(vertexName, list);
				l.add(map);
			}
			ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(f));
			oos.writeObject(l);
			oos.close();
		}catch(Exception e){
			e.printStackTrace();
		}
		return l;
	}
	/**
	 * 删除titan节点
	 * @param vertexName
	 * @return List<Map<String,Object>>
	 */
	public static List<Map<String,Object>> deleteTitanVertex(String vertexName){
		List<Map<String,Object>> l = null;
		try{
			File f = new File(savePath);
			if(!f.exists()){
				f.createNewFile();
			}
			if(f.length()>0){
				ObjectInputStream ois = new ObjectInputStream(new FileInputStream(f));
				l = (List<Map<String,Object>>)ois.readObject();
				Map<String,Object> map = l.get(0);
				List<Map<String, Object>> list = (List<Map<String, Object>>)map.get(vertexName);
				if(list!=null){
					map.remove(vertexName);
				}
				ois.close();
			}
			ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(f));
			oos.writeObject(l);
			oos.close();
		}catch(Exception e){
			e.printStackTrace();
		}
		return l;
	}
	
	/**
	 * 添加边
	 * @param edgeName
	 * @param edgeJson
	 * @return List<Map<String,Object>>
	 */
	public static List<Map<String,Object>> addTitanEdge(String edgeName,String edgeJson){
		List<Map<String,Object>> l = null;
		List<Map<String,Object>> list = new ArrayList<Map<String,Object>>();
		try {
			//先把前台传回来的json转换为list节点
			list = JacksonMapperUtil.getObjectMapper().readValue(edgeJson, list.getClass());
			File f = new File(savePath);
			if(!f.exists()){
				f.createNewFile();
			}
			if(f.length()>0){
				//文件原来就存在，把文件反序列化为l,然后把添加的节点加到l里
				ObjectInputStream ois = new ObjectInputStream(new FileInputStream(f));
				l = (List<Map<String,Object>>)ois.readObject();
				Map<String, Object> map = l.get(1);
				map.put(edgeName, list);
				ois.close();
			}else{
				//文件是新建的，new一个l，把添加的节点放到l里
				l = new ArrayList<Map<String,Object>>();
				Map<String, Object> map = new HashMap<String,Object>();
				map.put(edgeName, list);
				l.add(map);
			}
			//把新的集合l序列化放到config下
			ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(f));
			oos.writeObject(l);
			oos.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return l;
	}
	
	/**
	 * 修改边（其实跟添加一样）
	 * @param vertexName
	 * @param vertexJson
	 * @return List<Map<String,Object>>
	 */
	public static List<Map<String, Object>> updateTitanEdge(String edgeName,String vertexJson){
		List<Map<String, Object>> l = null;
		List<Map<String,Object>> list = new ArrayList<Map<String,Object>>();
		try{
			list = JacksonMapperUtil.getObjectMapper().readValue(vertexJson, list.getClass());
			File f = new File(savePath);
			if(!f.exists()){
				f.createNewFile();
			}
			if(f.length()>0){
				ObjectInputStream ois = new ObjectInputStream(new FileInputStream(f));
				l = (List<Map<String, Object>>)ois.readObject();
				Map<String,Object> map = l.get(1);
				map.put(edgeName, list);
				ois.close();
			}else{
				l = new ArrayList<Map<String,Object>>();
				Map<String,Object> map = new HashMap<String,Object>();
				map.put(edgeName, list);
				l.add(map);
			}
			ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(f));
			oos.writeObject(l);
			oos.close();
		}catch(Exception e){
			e.printStackTrace();
		}
		return l;
	}
	/**
	 * 删除titan边
	 * @param vertexName
	 * @return List<Map<String,Object>>
	 */
	public static List<Map<String,Object>> deleteTitanEdge(String edgeName){
		List<Map<String,Object>> l = null;
		try{
			File f = new File(savePath);
			if(!f.exists()){
				f.createNewFile();
			}
			if(f.length()>0){
				ObjectInputStream ois = new ObjectInputStream(new FileInputStream(f));
				l = (List<Map<String,Object>>)ois.readObject();
				Map<String, Object> map = l.get(1);
				List<Map<String, Object>> list = (List<Map<String, Object>>)map.get(edgeName);
				if(list!=null){
					map.remove(edgeName);
				}
				ois.close();
			}
			ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(f));
			oos.writeObject(l);
			oos.close();
		}catch(Exception e){
			e.printStackTrace();
		}
		return l;
	}
	
	public static void main(String[] args) {
		getTitanStructure();
	}
	
}

enum DataType{
	LONG("long", "java.lang.Long"),
	STRING("string","java.lang.String"),
	CHARACTER("character","java.lang.Character"),
	BOOLEAN("boolean","java.lang.Boolean"),
	BYTE("byte","java.lang.Byte"),
	SHORT("short","java.lang.Short"),
	INTEGER("integer","java.lang.Integer"),
	FLOAT("float","java.lang.Float"),
	ARRAY("array","java.lang.String[]"),
	
	STRONG("1","0"),//true false
	INDEX("1","0"),//true false
	CARDINALITY("1","2","3");//single,set,list
	
	private String name;
	private String value;
	private String isTrue;
	private String isFalse;
	
	private String single;
	private String set;
	private String list;
	
	private DataType(String single,String set,String list){
		this.single = single;
		this.set = set;
		this.list = list;
	}

	private DataType(String name, String value) {
		this.name = name;
		this.value = value;
		this.isTrue = name;
		this.isFalse = value;
	}
	
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getValue() {
		return value;
	}

	public void setValue(String value) {
		this.value = value;
	}

	public String getIsTrue() {
		return isTrue;
	}

	public void setIsTrue(String isTrue) {
		this.isTrue = isTrue;
	}

	public String getIsFalse() {
		return isFalse;
	}

	public void setIsFalse(String isFalse) {
		this.isFalse = isFalse;
	}

	public String getSingle() {
		return single;
	}

	public void setSingle(String single) {
		this.single = single;
	}

	public String getSet() {
		return set;
	}

	public void setSet(String set) {
		this.set = set;
	}

	public String getList() {
		return list;
	}

	public void setList(String list) {
		this.list = list;
	}
	
	
	
}
