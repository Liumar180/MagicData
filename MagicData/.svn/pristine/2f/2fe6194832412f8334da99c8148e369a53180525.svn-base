package com.integrity.dataSmart.titanGraph.util;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import com.integrity.dataSmart.common.DataType;
import com.thinkaurelius.titan.core.TitanGraph;
import com.tinkerpop.blueprints.Edge;
import com.tinkerpop.blueprints.Vertex;

public class ImpQqFriendsToTitan implements Runnable{

	List<List<Vertex>> list;
	TitanGraph graph;
    
    public ImpQqFriendsToTitan(List<List<Vertex>> list,TitanGraph graph){
        this.list = list;
        this.graph = graph;
    }
    
    @Override
	public void run() {
    	List<Vertex> listOrg = list.get(0);
		Vertex perOrg = listOrg.get(1);
		List<Vertex> l = new ArrayList<Vertex>();
		for(int i=1;i<list.size();i++){
			Vertex perFri = list.get(i).get(1);
			l.add(perFri);
		}
		boolean isTrue = true;
		Iterator coh = perOrg.query().labels(new String[] { "relational" }).has("relationtype",DataType.RELATIONTYPE_QQ).vertices().iterator();
		for(Vertex perCurrent : l){
			while (coh.hasNext()) {
				Vertex PP = (Vertex) coh.next();
				if (PP.getId() == perCurrent.getId()) {
					System.out.println("存在relational边，且relationtype为1");
					isTrue = false;
					break;
				}
			}
			if (isTrue) {
				Edge s = graph.addEdge(null, perOrg, perCurrent,"relational");
				s.setProperty("relationtype",DataType.RELATIONTYPE_QQ);
				s.setProperty("nickname", "");
			}
		}
		graph.commit();
	}

}
