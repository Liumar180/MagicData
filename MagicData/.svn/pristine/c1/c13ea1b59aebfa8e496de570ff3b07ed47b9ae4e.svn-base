import com.thinkaurelius.titan.core.TitanFactory;
import com.thinkaurelius.titan.core.TitanGraph;
import com.tinkerpop.blueprints.Vertex;
import java.util.Set;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.lang.Iterable;
import java.util.concurrent.atomic.AtomicLong;
import java.util.*;
import com.integrity.dataSmart.common.ProcessUtils;
import com.integrity.dataSmart.dataImport.dao.DataImpTaskDao;
import com.integrity.dataSmart.util.DateFormat;

TitanGraph graph = TitanFactory.build().set("storage.backend", "hbase").set("storage.hostname", "192.168.40.10").open();

AtomicLong count=new AtomicLong();
TaskId
public boolean processRow(StepMetaInterface smi,StepDataInterface sdi) throws KettleException
{
count.addAndGet(1);
Object[] r = getRow();

if (r == null) {
    graph.commit();
    DataImpTaskDao dao = new DataImpTaskDao();
	dao.toRefreshData(taskId, count.get()-1);	
    System.out.println("录入数量："+(count.get()-1)+"个；");
	setOutputDone();
	return false;

}
long st = System.currentTimeMillis();
		String startTime= DateFormat.transferLongToDate(st);
		System.out.println("开始时间："+startTime);

r= createOutputRow(r, data.outputRowMeta.size());

		
		    String password = "";//密码
		    try {
				password = get(Fields.In,"password").getString(r);//密码
				} catch (Exception e) {}
		    String ct = "";//创建时间
		    try {
		    ct = get(Fields.In, "createtime").getString(r);//创建时间
				} catch (Exception e) {}
		    String email = "";//邮件
		    try {
		    	email = get(Fields.In, "email").getString(r);//邮件
				} catch (Exception e) {}
		    String title = "";//标题
		    try {
		    	title = get(Fields.In, "title").getString(r);//标题
				} catch (Exception e) {}

		    String content ="";//内容
		    try {
		    	content =get(Fields.In, "content").getString(r);//内容
				} catch (Exception e) {}
		    String from = "";//发件人
		    try {
		    	from = get(Fields.In, "from").getString(r);//发件人
				} catch (Exception e) {}
		    String to = "";//收件人
		    try {
		    to = get(Fields.In, "to").getString(r);//收件人
				} catch (Exception e) {}
		    String cc = "";//抄送人
		    try {
		    cc = get(Fields.In, "cc").getString(r);//抄送人
				} catch (Exception e) {}

        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        //发送时间
        Long time = 0L;
      	Long eventtime = 0L;//事件时间
		try {
			eventtime = simpleDateFormat.parse(ct).getTime();
			time = eventtime;
		} catch (ParseException e1) {
			e1.printStackTrace(System.out);
		}
    

	
			if((null!=email) && (!email.equals(""))){
				Object EmailIte = null;
						if(email != null && !"".equals(email)){
							EmailIte =graph.query().has("email",email).vertices();
						}
						Vertex tmp = null;
						boolean t =  false;
						if(EmailIte != null){t = ((Iterable) EmailIte).iterator().hasNext();}
				 while(t){
					tmp = (Vertex)((Iterable)EmailIte).iterator().next();
					Set s = tmp.getPropertyKeys();
	           if(s != null){
					for(int i=0;i<s.size();i++){
						if(tmp.getProperty("type").toString().equals("Email")){
							break;
						}
					}
	            }
					break;

				}
			
			if(tmp != null){
					Vertex person =null;
					try{
					/**存在人物对象**/
					person = (Vertex)tmp.query().labels(new String[]{"own"}).vertices().iterator().next();
					}catch(java.util.NoSuchElementException e){
					e.printStackTrace(System.out);
					
					}
					if(person !=null){
						Object childs = person.query().labels(new String[]{"own"}).vertices();

						boolean emailEvexist = false;
						for (Iterator iterator = ((Iterable)childs).iterator(); iterator.hasNext();) {
							Vertex v = (Vertex) iterator.next();
							
							if(v != null){
							if("Email".equals(v.getProperty("type"))){
	                        if(v.getProperty("email").equals(email)){
	                        	//如果邮箱相同，对邮箱信息进行更新
	                        	emailEvexist = true;
								}
							}
	            
						}
					if(!emailEvexist){//邮箱新增（存在人）
						Vertex emailEveve = null;//全局邮件时间对象
							if(email!=null && !"".equals(email)){
								Vertex emailtmp = graph.addVertex(null);
								emailtmp.setProperty("type","Email");
								emailtmp.setProperty("email",email);
								if(password != null && !"".equals(password)){
	                            emailtmp.setProperty("password", password);
	                            }
								graph.addEdge(null,person,emailtmp,"own");
							}	
							//邮件事件处理
							//邮件事件(to)
							
							if(to != null && !to.equals("")){
							boolean fromto = false;
							Iterable personto = graph.query().has("email",to).vertices();
							if(personto.iterator().hasNext()){
							Vertex pto = (Vertex) personto.iterator().next();
								
							for (Iterator iterator1 = ((Iterable)personto).iterator(); iterator1.hasNext();) {
								Vertex v1 = (Vertex) iterator1.next();
								if(v1 != null){
								if("Email".equals(v1.getProperty("type"))){
		                        if(v1.getProperty("email").equals(to)){
		                        	//如果相等说明 收件人是存在的
		                        	fromto = true;
									}
								}
		                  }
								Object perto = null;
							if(fromto){
								perto = pto.query().labels(new String[]{"own"}).vertices().iterator().next();
								if(perto != null){
									if(emailEveve == null){
										emailEveve = graph.addVertex(null);
										 emailEveve.setProperty("type", "EmailEvent");
										 if(content != null && !content.equals("")){
											 emailEveve.setProperty("content", content);
										 }
										 if(title != null && !title.equals("")){
											 emailEveve.setProperty("title", title);
										 }
										 emailEveve.setProperty("from", from);
										 emailEveve.setProperty("to", to);
										 emailEveve.setProperty("time", time);
										graph.addEdge(null, person, emailEveve, "emailfrom").setProperty("eventtime", eventtime);
										graph.addEdge(null, emailEveve, (Vertex) perto, "emailto").setProperty("eventtime", eventtime);
									}else{
										graph.addEdge(null, emailEveve, (Vertex) perto, "emailto").setProperty("eventtime", eventtime);
									}
								
							} 
							}else{
									  Vertex p = graph.addVertex(null);
									  p.setProperty("type", "Person");
									  
									  Vertex em  = graph.addVertex(null);
									  em.setProperty("type", "Email");
									  em.setProperty("email", to);
									  graph.addEdge(null, p, em, "own");
									  if(emailEveve == null){
										  emailEveve = graph.addVertex(null);
										  emailEveve.setProperty("type", "EmailEvent");
											 if(content != null && !content.equals("")){
												 emailEveve.setProperty("content", content);
											 }
											 if(title != null && !title.equals("")){
												 emailEveve.setProperty("title", title);
											 }
											 emailEveve.setProperty("from", from);
											 emailEveve.setProperty("to", to);
											 emailEveve.setProperty("time", time);
											graph.addEdge(null, person, emailEveve, "emailfrom").setProperty("eventtime", eventtime);
											graph.addEdge(null, emailEveve, p, "emailto").setProperty("eventtime", eventtime);
									  }else{
											graph.addEdge(null, emailEveve, p, "emailto").setProperty("eventtime", eventtime);
									  }
										 
									  
								  }
								}
							}
							
							}
							//邮件事件(cc)
		                    if(cc != null  && !cc.equals("")){
		                    Vertex pcc = null;
		                    boolean fromcc = false;
							Iterable personcc = graph.query().has("email",cc).vertices();
							if(personcc.iterator().hasNext()){
							pcc = (Vertex) personcc.iterator().next();
							for (Iterator iterator1 = ((Iterable)personcc).iterator(); iterator1.hasNext();) {
								Vertex v1 = (Vertex) iterator1.next();
								if(v1 != null){
								if("Email".equals(v1.getProperty("type"))){
		                        if(v1.getProperty("email").equals(cc)){
		                        	fromcc = true;
									}
								}
		                  }
								Object percc = null;
							if(fromcc){
								percc = pcc.query().labels(new String[]{"own"}).vertices().iterator().next();
								
								if(percc != null){
									if(emailEveve == null){
										emailEveve = graph.addVertex(null);
										 emailEveve.setProperty("type", "EmailEvent");
										 if(content != null && !content.equals("")){
											 emailEveve.setProperty("content", content);
										 }
										 if(title != null && !title.equals("")){
											 emailEveve.setProperty("title", title);
										 }
										 emailEveve.setProperty("from", from);
										 emailEveve.setProperty("to", cc);
										 emailEveve.setProperty("time", time);
										graph.addEdge(null, person, emailEveve, "emailfrom").setProperty("eventtime", eventtime);
										graph.addEdge(null, emailEveve, (Vertex) percc, "emailcc").setProperty("eventtime", eventtime);
									}else{
										graph.addEdge(null, emailEveve, (Vertex) percc, "emailcc").setProperty("eventtime", eventtime);
									}
								
								}
								  }else{
									  Vertex p = graph.addVertex(null);
									  p.setProperty("type", "Person");
									  
									  Vertex em  = graph.addVertex(null);
									  em.setProperty("type", "Email");
									  em.setProperty("email", cc);
									  graph.addEdge(null, p, em, "own");
									  if(emailEveve ==null){
										  emailEveve = graph.addVertex(null);
										  emailEveve.setProperty("type", "EmailEvent");
											 if(content != null && !content.equals("")){
												 emailEveve.setProperty("content", content);
											 }
											 if(title != null && !title.equals("")){
												 emailEveve.setProperty("title", title);
											 }
											 emailEveve.setProperty("from", from);
											 emailEveve.setProperty("to", cc);
											 emailEveve.setProperty("time", time);
											graph.addEdge(null, person, emailEveve, "emailfrom").setProperty("eventtime", eventtime);
											graph.addEdge(null, emailEveve, p, "emailcc").setProperty("eventtime", eventtime);
									  }else{
											graph.addEdge(null, emailEveve, p, "emailcc").setProperty("eventtime", eventtime);
									  }
										
										
										  
								   }
								  }
		                        }
		                      
		                    }
							
						}else{
							Vertex emailEveve = null;//更新（存在人）
							if(to != null && !to.equals("")){
							Vertex pto = null;	
							Iterable personto = graph.query().has("email",to).vertices();
							
							boolean eventtoExist = false;
							if(personto.iterator().hasNext()){
							pto = (Vertex) personto.iterator().next();
							
							for (Iterator iterator1 = personto.iterator(); iterator1.hasNext();) {
								Vertex v1 = (Vertex) iterator1.next();
	                            if(to != null){
	                               if(to.equals(v1.getProperty("email"))){
	                            	   eventtoExist=true;
								               }
	                                      }
							  }
							}
							Object perto = null;
							if(eventtoExist){
							if(to!=null && !"".equals(to)){
								perto = pto.query().labels(new String[]{"own"}).vertices().iterator().next();
								if(perto != null){
									if(emailEveve == null){
										emailEveve = graph.addVertex(null);
										emailEveve.setProperty("type","EmailEvent");
										if(content != null && !content.equals("")){
											emailEveve.setProperty("content", content);
										 }
										 if(title != null && !title.equals("")){
											 emailEveve.setProperty("title", title);
										 }
										 emailEveve.setProperty("from", from);
										 emailEveve.setProperty("to", to);
										 emailEveve.setProperty("time", time);
										graph.addEdge(null, person, emailEveve, "emailfrom").setProperty("eventtime", eventtime);
										graph.addEdge(null, emailEveve, (Vertex) perto, "emailto").setProperty("eventtime", eventtime);
									}else{
										graph.addEdge(null, emailEveve, (Vertex) perto, "emailto").setProperty("eventtime", eventtime);
									}
								
								}
								}
							}else{
								Vertex p = graph.addVertex(null);
								p.setProperty("type", "Person");
								
								Vertex em  = graph.addVertex(null);
								  em.setProperty("type", "Email");
								  em.setProperty("email", to);
								  graph.addEdge(null, p, em, "own");
								  
								if(to!=null && !"".equals(to)){
									if(emailEveve == null){
										emailEveve = graph.addVertex(null);
										emailEveve.setProperty("type","EmailEvent");
										if(content != null && !content.equals("")){
											emailEveve.setProperty("content", content);
										 }
										 if(title != null && !title.equals("")){
											 emailEveve.setProperty("title", title);
										 }
										 emailEveve.setProperty("from", from);
										 emailEveve.setProperty("to",to);
										 emailEveve.setProperty("time", time);
										graph.addEdge(null, person, emailEveve, "emailfrom").setProperty("eventtime", eventtime);
										graph.addEdge(null, emailEveve, p, "emailto").setProperty("eventtime", eventtime);
									}else{
										graph.addEdge(null, emailEveve, p, "emailto").setProperty("eventtime", eventtime);
									}
									
									}
								
							}
							
							}
							
							
                            if(cc != null && !cc.equals("")){
                            Vertex pcc = null;
							Iterable personcc = graph.query().has("email",cc).vertices();
							if(personcc.iterator().hasNext()){
								pcc = (Vertex) personcc.iterator().next();
							}
							
							boolean eventccExist = false;
							for (Iterator iterator1 = personcc.iterator(); iterator1.hasNext();) {
								Vertex v1 = (Vertex) iterator1.next();
	                            if(cc != null){
	                               if(cc.equals(v1.getProperty("email"))){
	                            	   eventccExist=true;
								               }
	                                      }
								

							}
							 
							if(eventccExist){
							Object  percc = null;
							if(cc!=null && !"".equals(cc)){
								percc = pcc.query().labels(new String[]{"own"}).vertices().iterator().next();
								 
								if(percc != null){
									if(emailEveve == null){
										emailEveve = graph.addVertex(null);
										emailEveve.setProperty("type","EmailEvent");
										if(content != null && !content.equals("")){
											emailEveve.setProperty("content", content);
										 }
										 if(title != null && !title.equals("")){
											 emailEveve.setProperty("title", title);
										 }
										 emailEveve.setProperty("from", from);
										 emailEveve.setProperty("to", cc);
										 emailEveve.setProperty("time", time);
										graph.addEdge(null, person, emailEveve, "emailfrom").setProperty("eventtime", eventtime);
										graph.addEdge(null, emailEveve, (Vertex) percc, "emailcc").setProperty("eventtime", eventtime);
									}else{
										graph.addEdge(null, emailEveve, (Vertex) percc, "emailcc").setProperty("eventtime", eventtime);
									}
								
								}
								}
							}else{
								Vertex p = graph.addVertex(null);
								p.setProperty("type", "Person");
								
								Vertex em  = graph.addVertex(null);
								  em.setProperty("type", "Email");
								  em.setProperty("email", cc);
								  graph.addEdge(null, p, em, "own");
								
								if(cc!=null && !"".equals(cc)){
									if(emailEveve == null){
										emailEveve = graph.addVertex(null);
										emailEveve.setProperty("type","EmailEvent");
										if(content != null && !content.equals("")){
											emailEveve.setProperty("content", content);
										 }
										 if(title != null && !title.equals("")){
											 emailEveve.setProperty("title", title);
										 }
										 emailEveve.setProperty("from", from);
										 emailEveve.setProperty("to", cc);
										 emailEveve.setProperty("time", time);
										graph.addEdge(null, person, emailEveve, "emailfrom").setProperty("eventtime", eventtime);
										graph.addEdge(null, emailEveve, p, "emailcc").setProperty("eventtime", eventtime);
									}else{
										graph.addEdge(null, emailEveve, p, "emailcc").setProperty("eventtime", eventtime);
									}
									
									
									}
								
								
								
							}
                            
						}
						
						}
							
						}
					}
					
				}else{
					Vertex emailEveve = null;//全局邮件时间对象
					/*********新加邮箱数据信息*********/
					Vertex personNew = graph.addVertex(null);//人物对象
					personNew.setProperty("type","Person");
					//邮件
					Vertex emailtmp = graph.addVertex(null);
					emailtmp.setProperty("type","Email");
	                if(email != null && !email.equals("")){
	                emailtmp.setProperty("email",email);
	                }
	                if(password != null && !password.equals("")){
	                emailtmp.setProperty("password", password);
	                }
					graph.addEdge(null,personNew,emailtmp,"own");
					//邮件事件(to)
					if(to != null && !to.equals("")){
					Iterable personto = graph.query().has("email",to).vertices();
					
					Vertex tmpto = null;
					boolean tto =  false;
						if(personto != null){tto = personto.iterator().hasNext();}
				 while(tto){
					 tmpto = (Vertex) personto.iterator().next();
					Set s = tmpto.getPropertyKeys();
	           if(s != null){
					for(int j=0;j<s.size();j++){
						if(tmpto.getProperty("type").toString().equals("Email")){
							break;
						}
					}
	            }
					break;

				}
				 Vertex per = null;
				 if(tmpto != null){
					  per = (Vertex)tmpto.query().labels(new String[]{"own"}).vertices().iterator().next();
					  
						if(per != null){
						if(emailEveve == null){
							emailEveve = graph.addVertex(null);
							 emailEveve.setProperty("type", "EmailEvent");
							 if(content != null && !content.equals("")){
								 emailEveve.setProperty("content", content);
							 }
							 if(title != null && !title.equals("")){
								 emailEveve.setProperty("title", title);
							 }
							 emailEveve.setProperty("from", from);
							 emailEveve.setProperty("to", to);
							 emailEveve.setProperty("time", time);
							graph.addEdge(null, personNew, emailEveve, "emailfrom").setProperty("eventtime", eventtime);
							graph.addEdge(null, emailEveve, per, "emailto").setProperty("eventtime", eventtime);
							
						}else{
							graph.addEdge(null, emailEveve, per, "emailto").setProperty("eventtime", eventtime);
						}
						 
						}
						}else{
							  Vertex p = graph.addVertex(null);
							  p.setProperty("type", "Person");
							  
							  Vertex em  = graph.addVertex(null);
							  em.setProperty("type", "Email");
							  em.setProperty("email", to);
							  graph.addEdge(null, p, em, "own");
							  if(emailEveve == null){
								  emailEveve = graph.addVertex(null);
								  emailEveve.setProperty("type", "EmailEvent");
									 if(content != null && !content.equals("")){
										 emailEveve.setProperty("content", content);
									 }
									 if(title != null && !title.equals("")){
										 emailEveve.setProperty("title", title);
									 }
									 emailEveve.setProperty("from", from);
									 emailEveve.setProperty("to", to);
									 emailEveve.setProperty("time", time);
									graph.addEdge(null, personNew, emailEveve, "emailfrom").setProperty("eventtime", eventtime);
									graph.addEdge(null, emailEveve, p, "emailto").setProperty("eventtime", eventtime);
							  }else{
									graph.addEdge(null, emailEveve, p, "emailto").setProperty("eventtime", eventtime);
							  }
								 
						}
					
					}
					
					//邮件事件(cc)
					if(cc != null && !cc.equals("")){
					Iterable personcc = graph.query().has("email",cc).vertices();
					/****/
					Vertex tmpcc = null;
					boolean tcc =  false;
						if(personcc != null){tcc = personcc.iterator().hasNext();}
				 while(tcc){
					 tmpcc = (Vertex) personcc.iterator().next();
					Set s = tmpcc.getPropertyKeys();
	           if(s != null){
					for(int j=0;j<s.size();j++){
						if(tmpcc.getProperty("type").toString().equals("Email")){
							break;
						}
					}
	            }
					break;

				}
				 Vertex perc = null;
						/****/
					if(tmpcc != null){
						perc = (Vertex)tmpcc.query().labels(new String[]{"own"}).vertices().iterator().next();
						if(perc != null){
							if(emailEveve == null){
								emailEveve = graph.addVertex(null);
								 emailEveve.setProperty("type", "EmailEvent");
								 if(content != null && !content.equals("")){
									 emailEveve.setProperty("content", content);
								 }
								 if(title != null && !title.equals("")){
									 emailEveve.setProperty("title", title);
								 }
								 emailEveve.setProperty("from", from);
								 emailEveve.setProperty("to", cc);
								 emailEveve.setProperty("time", time);
								graph.addEdge(null, personNew, emailEveve, "emailfrom").setProperty("eventtime", eventtime);
								graph.addEdge(null, emailEveve, perc, "emailcc").setProperty("eventtime", eventtime);
							}else{
								graph.addEdge(null, emailEveve, perc, "emailcc").setProperty("eventtime", eventtime);
							}
						 
						}
						}else{

							Vertex p = graph.addVertex(null);
							p.setProperty("type", "Person");
							
							Vertex em  = graph.addVertex(null);
							  em.setProperty("type", "Email");
							  em.setProperty("email", cc);
							  graph.addEdge(null, p, em, "own");
							if(emailEveve == null){
								emailEveve = graph.addVertex(null);
								emailEveve.setProperty("type", "EmailEvent");
								 if(content != null && !content.equals("")){
									 emailEveve.setProperty("content", content);
								 }
								 if(title != null && !title.equals("")){
									 emailEveve.setProperty("title", title);
								 }
								 emailEveve.setProperty("from", from);
								 emailEveve.setProperty("to", cc);
								 emailEveve.setProperty("time", time);
								graph.addEdge(null, personNew, emailEveve, "emailfrom").setProperty("eventtime", eventtime);
								graph.addEdge(null, emailEveve, p, "emailcc").setProperty("eventtime", eventtime);
							}else{
								graph.addEdge(null, emailEveve, p, "emailcc").setProperty("eventtime", eventtime);
							}
							 
					  
						}
					
				}
					
				}


	       if((count.get()-1)%100==0){
	              graph.commit(); 
	        DataImpTaskDao dao = new DataImpTaskDao();
	        dao.toRefreshData(taskId, count.get()-1);
             }
			 
 		long el = System.currentTimeMillis();
		String endTime= DateFormat.transferLongToDate(el);
		System.out.println("结束时间："+endTime);
		System.out.println("用时："+(el - st)+"毫秒");
          

putRow(data.outputRowMeta, r);

return true;
   }


}
