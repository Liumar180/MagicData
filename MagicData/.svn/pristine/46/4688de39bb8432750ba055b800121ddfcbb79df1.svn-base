package com.integrity.dataSmart.timeLine.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.lang.StringUtils;

import com.google.gson.Gson;
import com.integrity.dataSmart.common.DataType;
import com.integrity.dataSmart.timeLine.dao.EchartsBarDao;
import com.integrity.dataSmart.timeLine.util.BarColors;
import com.integrity.dataSmart.timeLine.util.EchartsData1;
import com.integrity.dataSmart.timeLine.util.MonthXCategory;
import com.integrity.dataSmart.timeLine.util.Series;
import com.integrity.dataSmart.timeLine.util.TimeBdzd;
import com.integrity.dataSmart.titanGraph.dao.SearchDetailDao;
import com.integrity.dataSmart.titanGraph.pojo.Email;

public class EchartsBarService {
	private EchartsBarDao echartsBarDao;

	public void setEchartsBarDao(EchartsBarDao echartsBarDao) {
		this.echartsBarDao = echartsBarDao;
	}

	/**
	 * 按条件查询多件年事件
	 * @param id
	 * @param types
	 * @param startm
	 * @param endtm
	 * @return
	 * 
	 */
	public String getVertexYearEventsById(Long id, String[] types,String startm, String endtm) throws Exception {
		EchartsData1 data = null;
		Map<String, List<Long>> result = null;
		List<String> xcategory = new ArrayList<String>();
		List<String> title = new ArrayList<String>();
		List<String> legend = new ArrayList<String>();
		List<Series> seList = new ArrayList<Series>();
		Map<String, Series> maps = new HashMap<String, Series>();
		title.add("TimeLine");
		Map<String, String> typeColor = BarColors.getTypeColor();
		Map<String, Map<String, Map<String, List<String>>>> mapstl = new LinkedHashMap<String, Map<String, Map<String, List<String>>>>();
		for (String key1 : types) {
			mapstl.put(key1, new HashMap<String, Map<String, List<String>>>());
		}
		for (int a = 0; a < types.length; a++) {
			mapstl.get(types[a]).put("normal",new HashMap<String, List<String>>());
			mapstl.get(types[a]).get("normal").put("color", new ArrayList<String>());
			mapstl.get(types[a]).get("normal").get("color").add(typeColor.get(types[a]));
		}
		String firsttime = null;
		int valuecha = 0;
		if (StringUtils.isBlank(startm) && StringUtils.isBlank(endtm)) {
			long timeDefault = DataType.TIMEZONE;
			long endTime = System.currentTimeMillis();
			long stardTime = endTime - timeDefault;
			String endtme = TimeBdzd.getLongDatetoStr(endTime + "");
			firsttime = TimeBdzd.getLongDatetoStr(stardTime + "");
			int xtYear = TimeBdzd.getDateYear(endtme);
			int czYear = TimeBdzd.getDateYear(firsttime);
			int mon1 = TimeBdzd.getDateMonth(endtme);
			int mon2 = TimeBdzd.getDateMonth(firsttime);
			firsttime = czYear + "-" + mon2;
			int monc = mon1 - mon2 + 1;
			int dhc = (xtYear - czYear) * 12 + monc;
			valuecha = java.lang.Math.abs(dhc);
		}
		if (StringUtils.isNotBlank(startm) && StringUtils.isNotBlank(endtm)&& startm.length() < 8 && endtm.length() < 8) {
			int xsYear = TimeBdzd.getDateYeardd(startm);
			int jsYear = TimeBdzd.getDateYeardd(endtm);
			int xsMonth = TimeBdzd.getDateMonthdd(startm);
			int jsMonth = TimeBdzd.getDateMonthdd(endtm);
			int moncz = jsMonth - xsMonth + 1;
			int dhc = (jsYear - xsYear) * 12 + moncz;
			valuecha = java.lang.Math.abs(dhc);
			firsttime = startm;
		}
		if (StringUtils.isNotBlank(startm) && StringUtils.isNotBlank(endtm) && startm.length() > 8 && endtm.length() > 8
				&& startm.length() < 14 && endtm.length() < 14) {
			// title.set(0, "TimeLine");
			int xsday = TimeBdzd.getDates(startm);
			int jsday = TimeBdzd.getDates(endtm);
			int daycz = jsday - xsday + 1;
			valuecha = java.lang.Math.abs(daycz);
			firsttime = startm;
		}
		if (StringUtils.isNotBlank(startm) && StringUtils.isNotBlank(endtm)&& startm.length() > 14 && endtm.length() > 14) {
			// title.set(0, "TimeLine");
			int xsHour = TimeBdzd.getHoursl(startm);
			int jsHour = TimeBdzd.getHoursl(endtm);
		        jsHour = jsHour + 1;
			int daycz = jsHour - xsHour;
			valuecha = java.lang.Math.abs(daycz);
			firsttime = startm;
		}
		try {
			result = echartsBarDao.getVertexYearEventsById(id, types,firsttime, valuecha);
			Set<String> set = result.keySet();
			for (Iterator<String> iter = set.iterator(); iter.hasNext();) {
				String key = (String) iter.next();
				List<Long> value = result.get(key);
				Map<String, Map<String, List<String>>> map = mapstl.get(key);
				maps.put(key, new Series());
				maps.get(key).setName(key);
				maps.get(key).setType("bar");
				if (firsttime.length() < 8 && valuecha <= 12) {
					maps.get(key).setBarCategoryGap("50%");
					maps.get(key).setBarWidth(10);
				}
				if (firsttime.length() > 8) {
					maps.get(key).setBarCategoryGap("10%");
					maps.get(key).setBarWidth(8);
				}
				maps.get(key).setItemStyle(map);
				maps.get(key).setData(value);
				legend.add(key);
			}
			for (Iterator<String> iter = set.iterator(); iter.hasNext();) {
				String key = (String) iter.next();
				Series value = maps.get(key);
				seList.add(value);
			}
			if (firsttime.length() < 8) {
				xcategory = MonthXCategory.getMonthXcategory11(firsttime,valuecha);
			}
			if (firsttime.length() > 8 && firsttime.length() < 14) {
				xcategory = MonthXCategory.getMonthXcategory21(firsttime,valuecha);
			}
			if (firsttime.length() > 14) {
				xcategory = MonthXCategory.getMonthXcategory22(firsttime,valuecha);
			}
			data = new EchartsData1(valuecha, title, legend, xcategory, seList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return getJson1(data);
	}

	/**
	 * 按年份查询上年事件类型
	 * @param lastY
	 * @param types
	 * @param yearcha
	 * @return
	 */
	public String getLastYearEvents(String lastY, Long id, String[] types,Integer yearcha) throws Exception {
		EchartsData1 data = null;
		Map<String, List<Long>> result = null;
		List<String> title = new ArrayList<String>();
		List<String> legend = new ArrayList<String>();
		List<Series> seList = new ArrayList<Series>();
		Map<String, Series> maps = new HashMap<String, Series>();
		title.add("TimeLine");
		Map<String, String> typeColor = BarColors.getTypeColor();
		Map<String, Map<String, Map<String, List<String>>>> mapstl = new HashMap<String, Map<String, Map<String, List<String>>>>();
		for (String key1 : types) {
			mapstl.put(key1, new HashMap<String, Map<String, List<String>>>());
		}
		for (int a = 0; a < types.length; a++) {
			mapstl.get(types[a]).put("normal",new HashMap<String, List<String>>());
			mapstl.get(types[a]).get("normal").put("color", new ArrayList<String>());
			mapstl.get(types[a]).get("normal").get("color").add(typeColor.get(types[a]));
		}
		try {
			result = echartsBarDao.getLastYearEvents(lastY, id, types, yearcha);
			Set<String> set = result.keySet();
			for (Iterator<String> iter = set.iterator(); iter.hasNext();) {
				String key = (String) iter.next();
				List<Long> value = result.get(key);
				Map<String, Map<String, List<String>>> map = mapstl.get(key);
				maps.put(key, new Series());
				maps.get(key).setName(key);
				maps.get(key).setType("bar");
				maps.get(key).setBarCategoryGap("50%");
				maps.get(key).setBarWidth(10);
				maps.get(key).setItemStyle(map);
				maps.get(key).setData(value);
				legend.add(key);
			}
			for (Iterator<String> iter = set.iterator(); iter.hasNext();) {
				String key = (String) iter.next();
				Series value = maps.get(key);
				seList.add(value);
			}
			List<String> xcategory = MonthXCategory.getMonthXcategory11(lastY,yearcha);
			data = new EchartsData1(null, title, legend, xcategory, seList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return getJson1(data);
	}

	/**
	 * 按年份查询下年事件类型
	 * 
	 * @param nextY
	 * @param id
	 * @param types
	 * @param yearcha
	 * @return
	 * 
	 */
	public String getNextYearEvents(String nextY, Long id, String[] types,Integer yearcha) throws Exception {
		EchartsData1 data = null;
		Map<String, List<Long>> result = null;
		List<String> title = new ArrayList<String>();
		List<String> legend = new ArrayList<String>();
		List<Series> seList = new ArrayList<Series>();
		Map<String, Series> maps = new HashMap<String, Series>();
		title.add("TimeLine");
		Map<String, String> typeColor = BarColors.getTypeColor();
		Map<String, Map<String, Map<String, List<String>>>> mapstl = new HashMap<String, Map<String, Map<String, List<String>>>>();
		for (String key1 : types) {
			mapstl.put(key1, new HashMap<String, Map<String, List<String>>>());
		}
		for (int a = 0; a < types.length; a++) {
			mapstl.get(types[a]).put("normal",new HashMap<String, List<String>>());
			mapstl.get(types[a]).get("normal").put("color", new ArrayList<String>());
			mapstl.get(types[a]).get("normal").get("color").add(typeColor.get(types[a]));
		}
		try {
			result = echartsBarDao.getNextYearEvents(nextY, id, types, yearcha);
			Set<String> set = result.keySet();
			for (Iterator<String> iter = set.iterator(); iter.hasNext();) {
				String key = (String) iter.next();
				List<Long> value = result.get(key);
				Map<String, Map<String, List<String>>> map = mapstl.get(key);
				maps.put(key, new Series());
				maps.get(key).setName(key);
				maps.get(key).setType("bar");
				maps.get(key).setBarCategoryGap("50%");
				maps.get(key).setBarWidth(10);
				maps.get(key).setItemStyle(map);
				maps.get(key).setData(value);
				legend.add(key);
			}
			for (Iterator<String> iter = set.iterator(); iter.hasNext();) {
				String key = (String) iter.next();
				Series value = maps.get(key);
				seList.add(value);
			}
			List<String> xcategory = MonthXCategory.getMonthXcategory11(nextY,yearcha);
			data = new EchartsData1(null, title, legend, xcategory, seList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return getJson1(data);
	}

	/**
	 * 按月份查询事件
	 * 
	 * @param id
	 * @param types
	 * @param monthfriday
	 * @param monthendday
	 * @return
	 */
	public String getVertexMonthEvents(String monthfriday, String monthendday,long id, String[] types) throws Exception {
		EchartsData1 data = null;
		List<String> title = new ArrayList<String>();
		List<String> legend = new ArrayList<String>();
		Map<String, List<Long>> result = null;
		List<Series> seList = new ArrayList<Series>();
		Map<String, Series> maps = new HashMap<String, Series>();
		title.add("TimeLine");
		Map<String, String> typeColor = BarColors.getTypeColor();
		Map<String, Map<String, Map<String, List<String>>>> mapstl = new HashMap<String, Map<String, Map<String, List<String>>>>();
		for (String key1 : types) {
			mapstl.put(key1, new HashMap<String, Map<String, List<String>>>());
		}
		for (int a = 0; a < types.length; a++) {
			mapstl.get(types[a]).put("normal",new HashMap<String, List<String>>());
			mapstl.get(types[a]).get("normal").put("color", new ArrayList<String>());
			mapstl.get(types[a]).get("normal").get("color").add(typeColor.get(types[a]));
		}
		try {
			result = echartsBarDao.getVertexMonthEventEmail(monthfriday,monthendday, id, types);
			Set<String> set = result.keySet();
			for (Iterator<String> iter = set.iterator(); iter.hasNext();) {
				String key = (String) iter.next();
				List<Long> value = result.get(key);
				Map<String, Map<String, List<String>>> map = mapstl.get(key);
				maps.put(key, new Series());
				maps.get(key).setName(key);
				maps.get(key).setType("bar");
				maps.get(key).setBarCategoryGap("10%");
				maps.get(key).setBarWidth(8);
				maps.get(key).setItemStyle(map);
				maps.get(key).setData(value);
				legend.add(key);
			}
			for (Iterator<String> iter = set.iterator(); iter.hasNext();) {
				String key = (String) iter.next();
				Series value = maps.get(key);
				seList.add(value);
			}
			// 设置X轴值
			List<String> xcategory = MonthXCategory.getDatetoMonthLong21(monthfriday);
			data = new EchartsData1(null, title, legend, xcategory, seList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return getJson1(data);
	}

	/**
	 * 按天查询事件
	 * @param id
	 * @param types
	 * @param monthfriday
	 * @param monthendday
	 * @return
	 */
	public String getVertexDayEvents(String day, long id, String[] types)throws Exception {
		EchartsData1 data = null;
		List<String> title = new ArrayList<String>();
		List<String> legend = new ArrayList<String>();
		Map<String, List<Long>> result = null;
		List<Series> seList = new ArrayList<Series>();
		Map<String, Series> maps = new HashMap<String, Series>();
		title.add("TimeLine");
		Map<String, String> typeColor = BarColors.getTypeColor();
		Map<String, Map<String, Map<String, List<String>>>> mapstl = new HashMap<String, Map<String, Map<String, List<String>>>>();
		for (String key1 : types) {
			mapstl.put(key1, new HashMap<String, Map<String, List<String>>>());
		}
		for (int a = 0; a < types.length; a++) {
			mapstl.get(types[a]).put("normal",new HashMap<String, List<String>>());
			mapstl.get(types[a]).get("normal").put("color", new ArrayList<String>());
			mapstl.get(types[a]).get("normal").get("color").add(typeColor.get(types[a]));
		}
		try {
			result = echartsBarDao.getVertexDayEvents(day, id, types);
			Set<String> set = result.keySet();
			for (Iterator<String> iter = set.iterator(); iter.hasNext();) {
				String key = (String) iter.next();
				List<Long> value = result.get(key);
				Map<String, Map<String, List<String>>> map = mapstl.get(key);
				maps.put(key, new Series());
				maps.get(key).setName(key);
				maps.get(key).setType("bar");
				maps.get(key).setBarCategoryGap("10%");
				maps.get(key).setBarWidth(8);
				maps.get(key).setItemStyle(map);
				maps.get(key).setData(value);
				legend.add(key);
			}
			for (Iterator<String> iter = set.iterator(); iter.hasNext();) {
				String key = (String) iter.next();
				Series value = maps.get(key);
				seList.add(value);
			}
			// 设置X轴值
			List<String> xcategory = MonthXCategory.getMonthXcategory22(day, 24);
			data = new EchartsData1(null, title, legend, xcategory, seList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return getJson1(data);
	}

	private String getJson1(EchartsData1 data) {
		Gson gson = new Gson();
		String jsonStr = gson.toJson(data);
		return jsonStr;
	}

	/**
	 * 根据id查询邮件信息
	 * @param id
	 * @return
	 */
	public String getEmailById(long id) throws Exception {
		SearchDetailDao searchDetailDao = new SearchDetailDao();
		Email ed = searchDetailDao.getEmailByID(id);
		// Email ed = TestEchartsData.getEmailById1(id);
//		if (ed.getSendtime() != null) {
//			String lStr = TimeBdzd.getLongDatetoStrl(ed.getSendtime() + "");
//			ed.setSendtime(lStr);
//		}
		Gson gson = new Gson();
		String jsonStr = gson.toJson(ed);
		return jsonStr;
	}

}
