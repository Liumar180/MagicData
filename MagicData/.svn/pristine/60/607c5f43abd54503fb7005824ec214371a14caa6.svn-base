package com.integrity.dataSmart.titanGraph.dao;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.collections.IteratorUtils;
import org.hibernate.Hibernate;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;

import com.integrity.dataSmart.common.DataType;
import com.integrity.dataSmart.titanGraph.bean.GroupMembersBean;
import com.integrity.dataSmart.titanGraph.bean.QQFriend;
import com.thinkaurelius.titan.core.TitanGraph;
import com.tinkerpop.blueprints.Vertex;

public class SearchQqRelationDaoImp extends HibernateDaoSupport implements SearchQqRelationDao{
	@SuppressWarnings("unchecked")
	@Override
	public List<QQFriend> queryQqFriends(String qq){
	    String hql = "FROM QQFriend  WHERE 1=1 AND qqNum="+qq;
	    List<QQFriend> query=getHibernateTemplate().find(hql);
		return query;
	}
	@SuppressWarnings("unchecked")
	@Override
	public List<Object> queryQqGroups(String qq) {
		List<Object> list = new ArrayList<Object>();
		String hql =  "SELECT DISTINCT a.GROUPNUM," +
		    		" b.group_name,b.create_time,  a.MEMBERREMARK as myMark,a.MEMBERNUM as numid,b.owner_qq,"+
		    		"(select DISTINCT memberremark from TB_RNS_QQ_GROUPLIST"+
		    		" where membernum = b.owner_qq and groupnum = b.groupnum"+
		    		" and rownum = 1 ) as owner_name,b.group_desc"+
		    		" FROM TB_RNS_QQ_GROUPLIST a, TB_RNS_QQ_GROUP_DESC b"+
		    		" WHERE a.membernum = "+qq+" and a.groupnum = b.groupnum(+)";
			
		Session ser = getHibernateTemplate().getSessionFactory().openSession();
		SQLQuery s =ser.createSQLQuery(hql);
		s.addScalar("GROUPNUM",Hibernate.INTEGER); //列名, 数据类型
		s.addScalar("GROUP_NAME",Hibernate.STRING);
		s.addScalar("CREATE_TIME",Hibernate.INTEGER);
		s.addScalar("myMark",Hibernate.STRING);
		s.addScalar("numid",Hibernate.INTEGER);
		s.addScalar("OWNER_QQ",Hibernate.INTEGER);
		s.addScalar("OWNER_NAME",Hibernate.STRING);
		s.addScalar("GROUP_DESC",Hibernate.STRING);
		list=s.list();
		return list;
	
	}
	
	/**
	 * 根据qq查询群组关系
	 * @param qq qq号码
	 * @return List中的每个List的第一个为群组后面为群成员
	 */
	@Override
	public List<List<Vertex>> findGroupRelativeByqqNum(String qq,TitanGraph graph) {
		//用于群组去重
		List<String> temp = new ArrayList<String>();
		List<List<Vertex>> groups = new ArrayList<List<Vertex>>();
		@SuppressWarnings("unchecked")
		Iterable<Vertex> it = graph.query().has("numid",qq).vertices();
		for (Vertex vertex : it) {
			if (DataType.IM.equals(vertex.getProperty("type"))) {//属性是IM的点
				Iterable<Vertex> groupIt = vertex.query().labels(DataType.GROUP).vertices();
				for (Vertex group : groupIt) {
					String groupNum = group.getProperty("groupnum");
					if (!temp.contains(groupNum)) {
						List<Vertex> groupList = new ArrayList<Vertex>();
						//当前qq
						groupList.add(it.iterator().next());
						groupList.add(group);
						//群成员查询
						/*Iterable<Vertex> qqIt = group.query().labels(DataType.GROUP).vertices();
						  groupList.addAll(IteratorUtils.toList(qqIt.iterator()));
						 */
						
						groups.add(groupList);
						temp.add(groupNum);
					}
				}
			}
		}
		return groups;
	}
	
	/**
	 * 根据已知节点id查询关系网络
	 * @param personId
	 * @return  List数组中共有四个对象：前两个为直接存储关系，后两个为事件关联关系
	 * 			第一个为关系边，类型为：ArrayList<Edge>;第二个为边对应的节点，类型为ArrayList<Vertex>（一个边对应一个点）
	 * 			第三个为人节点，类型为：ArrayList<Vertex>;第四个为事件节点，类型为ArrayList<ArrayList<Vertex>>
	 */
	@Override
	public List<Object> getRelativeById(long personId) {
		
		/*List<Object> result = new ArrayList<Object>();
		//查询出节点
		Vertex v1 = graph.getVertex(personId);
		
		直接查询存储的关系
		List<Edge> friendEdges = new ArrayList<Edge>();
		List<Vertex> friends = new ArrayList<Vertex>();
		result.add(friendEdges);
		result.add(friends);
		Iterable<Edge> edgeIterable = v1.query().direction(Direction.OUT).labels(DataType.RELATIONAL).edges();
//		Iterable<Vertex> vertexIterable = v1.query().labels(DataType.RELATIONAL).vertices();
		for (Edge edge : edgeIterable) {
			Vertex friend = edge.getVertex(Direction.IN);
			if (friend != null) {
				friendEdges.add(edge);
				friends.add(friend);
			}
		}
		
		根据事件查询关系
		ArrayList<ArrayList<Vertex>> eventList = new ArrayList<ArrayList<Vertex>>();
		ArrayList<Vertex> personList = new ArrayList<Vertex>();
		//查询出所有邻居节点
		TitanMultiVertexQuery mq = graph.multiQuery();
		mq.direction(Direction.BOTH).labels(DataType.ALLLABEL);
		int count = 0;
		for (Vertex f : v1.getVertices(Direction.BOTH, DataType.ALLLABEL)) {
			mq.addVertex((TitanVertex) f);
			count++;
		}
		result.add(personList);
		result.add(eventList);
		if (count == 0) {
			return result;
		}

		Map<String, TitanVertex> dataMap = new HashMap<String, TitanVertex>();
		Map<String, TitanVertex> vertexMap = new HashMap<String, TitanVertex>();
		Map<String, ArrayList<Vertex>> eventMap = new HashMap<String, ArrayList<Vertex>>();

		Map<TitanVertex, Iterable<TitanVertex>> results = mq.vertices();

		for (Iterator iterator = results.keySet().iterator(); iterator.hasNext();) {
			TitanVertex tv = (TitanVertex) iterator.next();
			
			Iterable<TitanVertex> tv2 = results.get(tv);

			for (Iterator iterator2 = tv2.iterator(); iterator2.hasNext();) {
				TitanVertex type = (TitanVertex) iterator2.next();
				
				String key1 = type.getId().toString() + tv.getProperty("type");
				if (!(type.getId().toString().equals(v1.getId().toString()))) {
					if (!dataMap.containsKey(key1)) {
						dataMap.put(key1, type);
						if (!vertexMap.containsKey(type.getId().toString())) {
							vertexMap.put(type.getId().toString(), type);
						}
						if (!eventMap.containsKey(type.getId().toString())) {
							ArrayList<Vertex> tt = new ArrayList<Vertex>();
							tt.add(tv);
							eventMap.put(type.getId().toString(), tt);
						}
						*//**
						 * modify by liubaofen 2016/02/18
						 * 查询关系网络时，将在关系边显示的类型中，添加事件类型的显示；
						 **//*
						else {
							ArrayList<Vertex> tt = eventMap.get(type.getId().toString());
							tt.add(tv);
							eventMap.put(type.getId().toString(), tt);
						}

					}
				}
			}
		}

		for (Iterator iterator = vertexMap.keySet().iterator(); iterator
				.hasNext();) {
			String key = (String) iterator.next();
			personList.add(vertexMap.get(key));
			eventList.add(eventMap.get(key));
		}
*/
		return null;
	}
	@SuppressWarnings("unchecked")
	@Override
	public List<Object> realNameWeigth(String qq) {
		List<Object> list = new ArrayList<Object>();
		String hql = "select FRIENDREMARK as realName ,count(*) as weight from ( "+
		" select FRIENDNUM,FRIENDREMARK from TB_RNS_QQ_FRIENDLIST where FRIENDNUM= "+qq+" and rownum < "+
		" 300"+
		" union all"+
		" select MEMBERNUM AS FRIENDNUM,MEMBERREMARK AS FRIENDREMARK from TB_RNS_QQ_GROUPLIST where MEMBERNUM= "+qq+" and "+
		" rownum < 50"+
		" ) t group by t.FRIENDREMARK ";
		Session ser = getHibernateTemplate().getSessionFactory().openSession();
		SQLQuery query = ser.createSQLQuery(hql);
		query.addScalar("realName",Hibernate.STRING);
		query.addScalar("weight",Hibernate.STRING);
		list = query.list();
		return list;
	}
	@Override
	public List<GroupMembersBean> queryMembersByGnum(String groupNum) {
		String hql = "SELECT MEMBERNUM,MEMBERREMARK FROM TB_RNS_QQ_GroupLisT WHERE GROUPNUM= "+groupNum+" and rownum < 2000";
	    @SuppressWarnings("unchecked")
		List<GroupMembersBean> query=getHibernateTemplate().find(hql);
		return query;
	}

}
