package com.integrity.dataSmart.titanGraph.dao;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.hibernate.Hibernate;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;

import com.integrity.dataSmart.common.DataType;
import com.integrity.dataSmart.titanGraph.bean.GroupMembersBean;
import com.integrity.dataSmart.titanGraph.bean.QQFriend;
import com.integrity.dataSmart.util.titan.TitanGraphUtil;
import com.thinkaurelius.titan.core.TitanGraph;
import com.tinkerpop.blueprints.Direction;
import com.tinkerpop.blueprints.Vertex;

public class SearchQqRelationDaoImp extends HibernateDaoSupport implements SearchQqRelationDao{
	
	private TitanGraph graph = TitanGraphUtil.getInstance().getTitanGraph();
	
	@SuppressWarnings("unchecked")
	@Override
	public List<QQFriend> queryQqFriends(String qq){
	    String hql = "FROM QQFriend  WHERE 1=1 AND qqNum="+qq;
	    List<QQFriend> query=getHibernateTemplate().find(hql);
		return query;
	}
	@SuppressWarnings("unchecked")
	@Override
	public List<Object> queryQqGroups(String qq) {
		List<Object> list = new ArrayList<Object>();
		String hql =  "SELECT DISTINCT a.GROUPNUM," +
		    		" b.group_name,b.create_time,  a.MEMBERREMARK as myMark,a.MEMBERNUM as numid,b.owner_qq,"+
		    		"(select DISTINCT memberremark from TB_RNS_QQ_GROUPLIST"+
		    		" where membernum = b.owner_qq and groupnum = b.groupnum"+
		    		" and rownum = 1 ) as owner_name,b.group_desc"+
		    		" FROM TB_RNS_QQ_GROUPLIST a, TB_RNS_QQ_GROUP_DESC b"+
		    		" WHERE a.membernum = "+qq+" and a.groupnum = b.groupnum(+)";
			
		Session ser = getHibernateTemplate().getSessionFactory().openSession();
		SQLQuery s =ser.createSQLQuery(hql);
		s.addScalar("GROUPNUM",Hibernate.INTEGER); //列名, 数据类型
		s.addScalar("GROUP_NAME",Hibernate.STRING);
		s.addScalar("CREATE_TIME",Hibernate.INTEGER);
		s.addScalar("myMark",Hibernate.STRING);
		s.addScalar("numid",Hibernate.INTEGER);
		s.addScalar("OWNER_QQ",Hibernate.INTEGER);
		s.addScalar("OWNER_NAME",Hibernate.STRING);
		s.addScalar("GROUP_DESC",Hibernate.STRING);
		list=s.list();
		return list;
	
	}
	
	/**
	 * 根据qq查询群组关系
	 * @param qq qq号码
	 * @return List中的每个List的第一个为群组后面为群成员
	 */
	@Override
	public List<List<Vertex>> findGroupRelativeByqqNum(String qq,TitanGraph graph) {
		//用于群组去重
		List<String> temp = new ArrayList<String>();
		List<List<Vertex>> groups = new ArrayList<List<Vertex>>();
		@SuppressWarnings("unchecked")
		Iterable<Vertex> it = graph.query().has("numid",qq).vertices();
		for (Vertex vertex : it) {
			if (DataType.IM.equals(vertex.getProperty("type"))) {//属性是IM的点
				Iterable<Vertex> groupIt = vertex.query().labels(DataType.GROUP).vertices();
				for (Vertex group : groupIt) {
					String groupNum = group.getProperty("groupnum");
					if (!temp.contains(groupNum)) {
						List<Vertex> groupList = new ArrayList<Vertex>();
						//当前qq
						Vertex qqnow = it.iterator().next();
						groupList.add(qqnow);
						groupList.add(group);
						//群成员查询
						/*Iterable<Vertex> qqIt = group.query().labels(DataType.GROUP).vertices();
						  groupList.addAll(IteratorUtils.toList(qqIt.iterator()));
						 */
						
						groups.add(groupList);
						temp.add(groupNum);
					}
				}
			}
		}
		return groups;
	}
	@SuppressWarnings("unchecked")
	@Override
	public List<Object> realNameWeigth(String qq) {
		List<Object> list = new ArrayList<Object>();
		String hql = "select FRIENDREMARK as realName ,count(*) as weight from ( "+
		" select FRIENDNUM,FRIENDREMARK from TB_RNS_QQ_FRIENDLIST where FRIENDNUM= "+qq+" and rownum < "+
		" 300"+
		" union all"+
		" select MEMBERNUM AS FRIENDNUM,MEMBERREMARK AS FRIENDREMARK from TB_RNS_QQ_GROUPLIST where MEMBERNUM= "+qq+" and "+
		" rownum < 50"+
		" ) t group by t.FRIENDREMARK ";
		Session ser = getHibernateTemplate().getSessionFactory().openSession();
		SQLQuery query = ser.createSQLQuery(hql);
		query.addScalar("realName",Hibernate.STRING);
		query.addScalar("weight",Hibernate.STRING);
		list = query.list();
		ser.close();
		return list;
	}
	@Override
	public List<GroupMembersBean> queryMembersByGnum(String groupNum) {
		String hql = "FROM GroupMembersBean WHERE GROUPNUM= "+groupNum+" and rownum < 2000";
	    @SuppressWarnings("unchecked")
		List<GroupMembersBean> query=getHibernateTemplate().find(hql);
		return query;
	}
	@Override
	public List<List<Vertex>> findGroupMemberBygroNum(String groqq,
			TitanGraph graph) {
		List<String> temp = new ArrayList<String>();
		List<List<Vertex>> qqMember = new ArrayList<List<Vertex>>();
		@SuppressWarnings("unchecked")
		Iterable<Vertex> it = graph.query().has("groupnum",groqq).vertices();//群组
		for (Vertex vertex : it) {
			if ("Group".equals(vertex.getProperty("type"))) {//属性是GROUP的点
				Iterable<Vertex> numIt = vertex.query().labels(DataType.GROUP).vertices();//成员节点
				for (Vertex nums : numIt) {
					String numId = nums.getProperty("numid");
					if (!temp.contains(numId)) {
						List<Vertex> qqList = new ArrayList<Vertex>();
						//当前qq
						Vertex group1 = it.iterator().next();
						qqList.add(group1);
						qqList.add(nums);
						Vertex person = nums.query().labels(new String[]{"own"}).vertices().iterator().next();
						qqList.add(person);
						//群成员查询
						/*Iterable<Vertex> qqIt = group.query().labels(DataType.GROUP).vertices();
						  groupList.addAll(IteratorUtils.toList(qqIt.iterator()));
						 */
						
						qqMember.add(qqList);
						temp.add(numId);
					}
				}
			}
		}
		return qqMember;
	}
	@Override
	public List<List<Vertex>> getQQFriendsByQQ(String qq) {

		List<List<Vertex>> result = new ArrayList<List<Vertex>>();
		
		@SuppressWarnings("unchecked")
		Iterable<Vertex> it = graph.query().has("numid",qq).vertices();
		for (Vertex vertex : it) {
			if (DataType.IM.equals(vertex.getProperty("type"))) {//属性是IM的点
				Iterable<Vertex> perVs = vertex.query().direction(Direction.IN).labels("own").vertices();
				Vertex perV = perVs.iterator().next();//当前qq的ower
				Iterator<Vertex> itPer = perV.query().labels(DataType.RELATIONAL).has("relationtype", "QQfriends").vertices().iterator();//好友节点
				while(itPer.hasNext()){
					List<Vertex> friends = new ArrayList<Vertex>();
					Vertex friendV = itPer.next();
					Iterator<Vertex> iterator = friendV.query().labels("own").vertices().iterator();
					while(iterator.hasNext()){
						Vertex ver = iterator.next();
						if (DataType.IM.equals(ver.getProperty("type"))) {//属性是IM的点
							//得是oracle里表上qq好友的qq,防止该好友有多个qq时不知道用哪个连线
							List<QQFriend> list = queryQqFriends(qq);
							boolean flag = false;
							for(QQFriend qqFriend:list){
								if(qqFriend.getFriendNum().equals(ver.getProperty("numid"))){
									flag = true;
									break;
								}
							}
							if(flag){
								friends = new ArrayList<Vertex>();
								friends.add(ver);//索引为0的是qq
								friends.add(friendV);//索引为1的是Person
							}
						}
					}
					if(friends.size()>0){
						result.add(friends);
					}
				}
				
				/*for(Vertex friPerV : friendPerVs){
					friends.add(friPerV);
					List<Vertex> qqs = new ArrayList<Vertex>();
					Iterable<Vertex> proVs = friPerV.query().labels("own").vertices();
					for(Vertex proV:proVs){
						if (DataType.IM.equals(proV.getProperty("type"))) {//属性是IM的点
							qqs.add(proV);
						}
					}
					friends.addAll(IteratorUtils.toList(qqs.iterator()));
				}*/
			}
		}
		return result;
	}


}
