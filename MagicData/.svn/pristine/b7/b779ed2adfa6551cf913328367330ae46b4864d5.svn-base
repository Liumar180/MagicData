package com.integrity.lawCase.fileManage.action;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URLDecoder;
import java.nio.channels.FileChannel;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;
import java.util.Set;
import java.util.UUID;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.apache.solr.common.SolrDocument;
import org.apache.struts2.ServletActionContext;
import org.apache.struts2.json.annotations.JSON;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.integrity.dataSmart.common.page.PageModel;
import com.integrity.dataSmart.impAnalyImport.email2solr.SolrAllUtils;
import com.integrity.dataSmart.impAnalyImport.util.FileOnlineShow.DocConverter;
import com.integrity.dataSmart.util.jsonUtil.JacksonMapperUtil;
import com.integrity.lawCase.caseManage.bean.CaseObject;
import com.integrity.lawCase.caseManage.bean.WorkAllocation;
import com.integrity.lawCase.common.ConstantManage;
import com.integrity.lawCase.fileManage.bean.FilesObject;
import com.integrity.lawCase.fileManage.service.FileManageService;
import com.integrity.lawCase.hostManage.bean.HostsObject;
import com.integrity.lawCase.organizationManage.bean.Organizationobject;
import com.integrity.lawCase.peopleManage.bean.Peopleobject;
import com.integrity.lawCase.relation.pojo.RelationAction;
import com.integrity.lawCase.relation.wapper.AllRelationWapper;
import com.integrity.lawCase.util.ChineToUtfUtils;
import com.integrity.lawCase.util.FilesToZip;
import com.integrity.lawCase.util.Java2word;
import com.integrity.lawCase.util.MD5FileUtil;
import com.integrity.lawCase.util.PageSetValueUtil;
import com.integrity.lawCase.util.TransformYears;
import com.integrity.login.bean.User;
import com.integrity.login.service.UserService;
import com.opensymphony.xwork2.ActionSupport;

@SuppressWarnings("serial")
public class FileManageAction extends ActionSupport{
	private Logger logger = Logger.getLogger(FileManageAction.class);
	private ObjectMapper mapper = JacksonMapperUtil.getObjectMapper(); 
	private InputStream inputStream;
	private HttpServletRequest request = ServletActionContext.getRequest();
	HttpServletResponse response=ServletActionContext.getResponse();
	private String from;
	FilesToZip filesToZip=new FilesToZip();
	public PageModel<FilesObject> pageModel;
	public FileManageService fileManageService;
	private UserService userService;
	public PageModel<FilesObject> pageModelfile;
	SimpleDateFormat sdf=new SimpleDateFormat("yyyyMMdd");
	SimpleDateFormat sdf1=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	SimpleDateFormat sdf2=new SimpleDateFormat("yyyy-MM-dd");
	MD5FileUtil md5=new MD5FileUtil();
	private String rootType;
	private String rootId;
	String path = request.getContextPath();
    String basePath = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+path+"/";
    private List<WorkAllocation> allocationList;
    private String ids;
	private int year;
	private int pageNo;
	private int pageSize;
	private Long id;//文件id
	private String direction;//
	private String responsiblePerson;
	private String annexUrl;
	private String annexName;
	private String fileName;
	private String fileContents;
	private Date createTime;
	private String remarkes1;
	private String remarkes2;
	private Integer remarkes3;
	private String relId;
    private String relType;
    /**文件上传*/
	private File fileField;
	
	//获取字典表信息
	private ServletContext sc = ServletActionContext.getServletContext();
	Map<String,Map<String,String>> allMap = (Map<String, Map<String, String>>) sc.getAttribute(ConstantManage.DATADICTIONARY);
	Map<String,String> FDIRECTION = allMap.get(ConstantManage.DIRECTION);//方向
	Map<String,String> type_property = (Map<String, String>) sc.getAttribute(ConstantManage.TYPE_PROPERTY);
	Properties swfdatas = (Properties) sc.getAttribute("swfUrlexe");
	public String fileMangeIndex(){
		fileMangeAllList();
			return SUCCESS;
		}
	/**
	 * 查询所有文件信息
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public String fileMangeAllList(){
		pageSize=50;
		List<Integer> years = TransformYears.getYearsBySeveral();
		request.getSession().setAttribute("years", years);
		pageModel=new PageModel();
		pageModel.setPageNo(1);
		pageModel.setPageSize(pageSize);
		pageModel = fileManageService.findFilePageModel(pageModel,new FilesObject(),null);
		List flist= new ArrayList();
		StringBuffer sb=new StringBuffer();
		for (FilesObject filesObject : pageModel.getList()) {
			if(filesObject.getDirection()!=null&&!"".equals(filesObject.getDirection())){
				for (String object : filesObject.getDirection().split(",")) {
					sb.append(FDIRECTION.get(object)+",");
				}
				filesObject.setDirection(sb.toString().substring(0, sb.toString().length()-1));
			}
			flist.add(filesObject);
			sb=new StringBuffer();
		}
		pageModel.setList(flist);
		request.getSession().setAttribute("pageModel",pageModel);
		String json = null;
		try {
			
			json = mapper.writeValueAsString(pageModel.getList());
			if (json != null) {
				inputStream = new ByteArrayInputStream(json.getBytes("utf-8"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}finally{
			try {
				inputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return SUCCESS;
	}
	/**
	 * 根据条件查询文件
	 * @return
	 */
	public String fileSeList(){
		String documentContent = request.getParameter("DocumentContent");//文件内容
		@SuppressWarnings("unused")
		List<SolrDocument> solrDocument = null;
		if(StringUtils.isNotEmpty(documentContent)){
			SolrAllUtils.connection();
			solrDocument = SolrAllUtils.getFileFullDocment(documentContent, pageNo-1, pageSize);
			SolrAllUtils.close();
		}
		FilesObject fileobject= new FilesObject();
		fileobject.setAnnexUrl(annexUrl);
		fileobject.setCreateTime(createTime);
		fileobject.setDirection(direction);
		fileobject.setFileContents(fileContents);
		fileobject.setFileName(fileName);
		fileobject.setResponsiblePerson(responsiblePerson);
		fileobject.setRemarkes1(remarkes1);
		fileobject.setRemarkes2(remarkes2);
		fileobject.setRemarkes3(remarkes3);
		pageModelfile=new PageModel();
		pageModelfile.setPageNo(pageNo);
		pageModelfile.setPageSize(pageSize);
		pageModelfile = fileManageService.findFilePageModel(pageModelfile,fileobject,solrDocument);
		if(pageModelfile.getList().size()==0){
			pageModelfile.setPageNo(pageModelfile.getTotalPage());
			pageModelfile =fileManageService.findFilePageModel(pageModelfile,fileobject,solrDocument);
		}
		List flist= new ArrayList();
		StringBuffer sb=new StringBuffer();
		for (FilesObject filebject : pageModelfile.getList()) {
			if(filebject.getDirection()!=null&&!"".equals(filebject.getDirection())){
				for (String object : filebject.getDirection().split(",")) {
					sb.append(FDIRECTION.get(object)+",");
				}
				filebject.setDirection(sb.toString().substring(0, sb.toString().length()-1));
			}
			flist.add(filebject);
			sb=new StringBuffer();
		}
		pageModelfile.setList(flist);
		List<User> userList = userService.findAllUser();
		request.setAttribute("userList", userList);
		request.getSession().setAttribute("pageModel",pageModelfile);
		String json = null;
		try {
			
			json = mapper.writeValueAsString(pageModelfile);
			if (json != null) {
				inputStream = new ByteArrayInputStream(json.getBytes("utf-8"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}finally{
			try {
				inputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return SUCCESS;
	}
	/**
	 * 查询文件列表
	 * @return
	 */
	public String fileMangeList(){
		try {
			FilesObject fbject=new FilesObject();
			if(year!=0){
				fbject.setCreateTime(sdf.parse(year+1+"0000"));
			}
			if(direction!=null && !"null".equals(direction)){
				fbject.setDirection(direction);
			}
			pageModel = fileManageService.findFilePageModel(pageModel,fbject,null);
			List flist= new ArrayList();
			StringBuffer sb=new StringBuffer();
			for (FilesObject filesObject : pageModel.getList()) {
				if(filesObject.getDirection()!=null&&!"".equals(filesObject.getDirection())){
					for (String object : filesObject.getDirection().split(",")) {
						sb.append(FDIRECTION.get(object)+",");
					}
					filesObject.setDirection(sb.toString().substring(0, sb.toString().length()-1));
				}
				flist.add(filesObject);
				sb=new StringBuffer();
			}
			pageModel.setList(flist);
		} catch (Exception e) {
			logger.error("查询文件列表异常",e);
		}
		return SUCCESS;
	}
	/**
	 * 文件关联添加
	 * @return
	 */
	public String viewFileAdd(){
		FilesObject filesObject= new FilesObject();
		filesObject.setId(id);
		request.getSession().setAttribute("fileinfo", new FilesObject());
		request.getSession().setAttribute("fileinfoR", filesObject);
		List<User> userList = userService.findAllUser();
		request.setAttribute("userList", userList);
		selectMoreSet(userList);
		//关联对象相关
		if(StringUtils.isNotBlank(rootId)){
			request.setAttribute("rootId", rootId);
			request.setAttribute("fileType", ConstantManage.FILEOBJECTTYPE);
			request.setAttribute("rootType", rootType);
		}
		return SUCCESS;
	}
	/**
	 * 文件关联查询
	 * @return
	 */
	public String viewFileAddRSearch(){
		StringBuffer json = new StringBuffer();
		try {
			fileName= URLDecoder.decode(fileName, "UTF-8"); 
			if(!"".equals(fileName)){
				for (String a : fileManageService.searchFname(id,fileName)) {
					json.append(a+",");
				}
			}
			if (json != null) {
				inputStream = new ByteArrayInputStream(json.toString().getBytes("utf-8"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}finally{
			try {
				inputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return SUCCESS;
	}
	/**
	 * 多选下拉框值初始化
	 * @param userList
	 */
	private void selectMoreSet(List<User> userList){
		try {
			List<String> userIds = new ArrayList<String>();
			List<String> userNames = new ArrayList<String>();
			for (User user : userList) {
				userIds.add(user.getId()+"");
				userNames.add(user.getUserName());
			}
			String userIdsJson = JacksonMapperUtil.getObjectMapper().writeValueAsString(userIds);
			request.setAttribute("userIds", userIdsJson);
			String userNamesJson = JacksonMapperUtil.getObjectMapper().writeValueAsString(userNames);
			request.setAttribute("userNames", userNamesJson);
			//多选下拉框使用
			Set<Entry<String, String>> set = FDIRECTION.entrySet();
			List<String> directionKeys = new ArrayList<String>();
			List<String> directionTexts = new ArrayList<String>();
			for (Entry<String, String> entry : set) {
				directionKeys.add(entry.getKey());
				directionTexts.add(entry.getValue());
			}
			String directionKeysJson = JacksonMapperUtil.getObjectMapper().writeValueAsString(directionKeys);
			request.setAttribute("directionKeys", directionKeysJson);
			String directionTextsJson = JacksonMapperUtil.getObjectMapper().writeValueAsString(directionTexts);
			request.setAttribute("directionTexts", directionTextsJson);
		} catch (JsonProcessingException e) {
			logger.error("json转换异常",e);
		}
	}
	/**
	 * 文件添加或修改
	 * @return
	 */
	public void fileMangeSave() throws IOException{
		boolean suc = false;
		String realpath = "";
		Long idR = null;
		try {
			FilesObject filesObject=new FilesObject();
			if(id!=null){ filesObject =fileManageService.getFileinfoByid(id);}
			filesObject.setDirection(direction);
			filesObject.setFileContents(fileContents);
			filesObject.setFileName(fileName);
			filesObject.setResponsiblePerson(responsiblePerson);
			
			if(id==null){id=(long) 0;}
			if(!"".equals(annexUrl)&&annexUrl!=null){
				if(annexUrl.indexOf("\\")>=0){
					if(id>0){
						annexName=filesObject.getAnnexName();
					}else{
						annexName=UUID.randomUUID().toString();
					}
					realpath = ServletActionContext.getServletContext().getRealPath("/")+"images\\uploadFile\\"+annexName+"\\" ;//获取服务器路径
					suc = uploadFile(fileName, fileField,realpath);
					filesObject.setAnnexName(annexName);
					filesObject.setAnnexUrl(basePath+"images/uploadFile/"+annexName+"/"+fileName);
					String targetPath = realpath + fileName;
					filesObject.setFileMD5(md5.getFileMD5String(new File(targetPath)));
				}else{
					filesObject.setAnnexUrl(fileManageService.getFileinfoByid(id).getAnnexUrl());
				}
			}else{
				filesObject.setAnnexUrl("");
			}
			//修改
			if(id>0){
				filesObject.setId(id);
				filesObject.setCreateTime(fileManageService.getFileinfoByid(id).getCreateTime());
				fileManageService.edit(filesObject);
				request.getSession().setAttribute("fileinfo", filesObject);
			}else{
				filesObject.setCreateTime(new Date());
				idR=fileManageService.saveR(filesObject);
				if(!"undefined".equals(rootId)){
					fileManageService.saveFileRelation(rootId, rootType, idR);
					request.getSession().setAttribute("fromtype", "detail");
				}else{
					request.getSession().setAttribute("fromtype", "save");
				}
				StringBuffer sb=new StringBuffer();
				if(filesObject.getDirection()!=null&&!"".equals(filesObject.getDirection())){
					for (String object : filesObject.getDirection().split(",")) {
						sb.append(FDIRECTION.get(object)+",");
					}
					filesObject.setDirection(sb.toString().substring(0, sb.toString().length()-1));
				}
				
				request.getSession().setAttribute("fileinfo", filesObject);
			}
			//存储文件到solr
			if(suc){
				Map<String,String> paramsMap = new HashMap<String,String>();
				if(id > 0){
					paramsMap.put("literal.id", id.toString());
				}else{
					paramsMap.put("literal.id", idR.toString());
				}
				SolrAllUtils.connection();
				SolrAllUtils.indexFilesSolrCell(realpath+fileName, paramsMap);
				SolrAllUtils.close();
				//将文本转换为swf文件，用于在线预览；
				DocConverter d=new DocConverter(realpath+fileName);
				String exe = swfdatas.get("swf.exe").toString();
				d.conver(fileName,exe);
			}
			
		} catch (Exception e) {
			logger.error("上传文件异常",e);
		}
		
	
	}
	/**
	 * 上传文件
	 * @return
	 */
	public boolean uploadFile(String fileName,File fileField,String realpath){
		boolean isFinally = false;
		FileInputStream input = null;
		FileOutputStream output = null;
		FileChannel in = null;
	    FileChannel out = null;
		try {
		 input = new FileInputStream(fileField);
		 File file =new File(realpath);    
			if  (!file .exists()  && !file .isDirectory()){       
			    file .mkdir();    
			}
			if(id>0){
				//修改时清空文件夹
		       deleteFile(file);
			}
		 output = new FileOutputStream(realpath+fileName);
		 in = input.getChannel();
         out = output.getChannel();
         in.transferTo(0, in.size(), out);
         isFinally = true;

		} catch (MalformedURLException e1) {
			e1.printStackTrace();
		} catch (IOException e1) {
			e1.printStackTrace();
		}finally{
        try {
		input.close();
        in.close();
        output.close();
        out.close();
        } catch (IOException e) {
        	e.printStackTrace();
        }
        }
		return isFinally;
	}
	/**
	 * 文件详细
	 * @return
	 */
	@SuppressWarnings("rawtypes")
	public String fileMangeDetail(){
		FilesObject filesObject=fileManageService.getFileinfoByid(id);
			filesObject.setCreateTimeString(sdf2.format(filesObject.getCreateTime()));
		StringBuffer sb=new StringBuffer();
		if(filesObject.getDirection()!=null&&!"".equals(filesObject.getDirection())){
			for (String object : filesObject.getDirection().split(",")) {
				sb.append(FDIRECTION.get(object)+",");
			}
			filesObject.setDirection(sb.toString().substring(0, sb.toString().length()-1));
		}
		request.getSession().setAttribute("fileinfo", filesObject);
		request.getSession().setAttribute("fromtype", from);
		List<User> userList = userService.findAllUser();
		request.setAttribute("userList", userList);
		selectMoreSet(userList);
		//跳转链接
		RelationAction relationAction = PageSetValueUtil.relationActionSet(type_property,ConstantManage.FILEOBJECTTYPE,id+"");
		request.setAttribute("relationAction", relationAction);
		//关联对象详细
		AllRelationWapper allRelation = fileManageService.findRelation(id, ConstantManage.FILEOBJECTTYPE);
		request.setAttribute("allRelation", allRelation);
		/*工作配置*/
		allocationList = fileManageService.findWorkAllocationByCaseId(id);
		request.setAttribute("allocationList", allocationList);
		request.setAttribute("rootType", ConstantManage.FILEOBJECTTYPE);
		//对象类型
		Map<String, String> typeMap = ConstantManage.getObjectTypeMap();
		request.setAttribute("typeMap", typeMap);
		
		
		
		return SUCCESS;
	}
	/**
	 * 文件删除
	 * @return
	 */
	public void viewFileDel(){
		for (String i : ids.split(",")) {
			FilesObject filesObject=fileManageService.getFileinfoByid(Long.valueOf(i));
			String img=filesObject.getAnnexUrl();
			
			if(img!=null){
				img=ServletActionContext.getServletContext().getRealPath("/")+"images\\uploadFile\\"+filesObject.getAnnexName();//+"\\"+img.split("/")[img.split("/").length-1]
				File dir = new File(img);  // 输入要删除的文件位置
		        deleteFile(dir);
			}
			fileManageService.delete(Long.valueOf(i));
		}
		//solr删除文件
		SolrAllUtils.connection();
		SolrAllUtils.deleteSolrObjectList(Arrays.asList(ids.split(",")));
		SolrAllUtils.close();
		fileManageService.delAllRelactions(ids, rootType);
	}

    private void deleteFile(File file) {  
        if (file.exists()) {//判断文件是否存在  
         if (file.isFile()) {//判断是否是文件  
          file.delete();//删除文件   
         } else if (file.isDirectory()) {//否则如果它是一个目录  
          File[] files = file.listFiles();//声明目录下所有的文件 files[];  
          for (int i = 0;i < files.length;i ++) {//遍历目录下所有的文件  
           this.deleteFile(files[i]);//把每个文件用这个方法进行迭代  
          }  
          file.delete();//删除文件夹  
         }  
        } else {  
         logger.info("所删文件不存在");  
        }  
       } 
    /**
	 * 文件关联删除
	 * @return
	 */
	public String delRelationship(){
    	if(StringUtils.isNotEmpty(String.valueOf(id))){
    		fileManageService.delSingleRelation(String.valueOf(id), rootType, relId, relType);
    		try {
				inputStream = new ByteArrayInputStream(String.valueOf(id).getBytes("utf-8"));
			} catch (UnsupportedEncodingException e) {
				e.printStackTrace();
			}finally{
				try {
					inputStream.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
    	}
    	return SUCCESS;
	}
	/**
	 * 导出文件
	 * @return
	 */
	public String exportFile(){
		 HashMap data = new HashMap();
		 FilesObject fo=new FilesObject();
		 StringBuffer sb=new StringBuffer();
		 Java2word j2w = new Java2word();
		 File file=new File(ServletActionContext.getServletContext().getRealPath("/")+"images\\exportFile\\fileM\\exfile");    
		 if  (!file .exists()  && !file .isDirectory()){       
			    file .mkdir();    
			 }
		 deleteFile(new File(ServletActionContext.getServletContext().getRealPath("/")+"images\\exportFile\\fileM\\exfile") );
		 if  (!file .exists()  && !file .isDirectory()){       
			    file .mkdir();    
			 }
		 //j2w
		 for (int i = 0; i < ids.split(",").length; i++) {
			//查询People信息
			 fo=fileManageService.getFileinfoByid(Long.valueOf(ids.split(",")[i]));
				//创建文件DOC
			 try {
				j2w.createDoc(ServletActionContext.getServletContext().getRealPath("/")+"images\\exportFile\\fileM\\exfile\\file"+i+".doc");
			} catch (Exception e) {
				logger.error("创建DOC失败-导出功能",e);
				e.printStackTrace();
			}
				//注入
			 data.put("$createTime$",fo.getCreateTime().toString());
			 data.put("$fileMD5$",fo.getFileMD5());
			 data.put("$fileName$",j2w.exUtilS(fo.getFileName()));
			 data.put("$responsiblePerson$",j2w.exUtilS(fo.getResponsiblePerson()));
			 
			 for (String object : fo.getDirection().split(",")) {
					sb.append(FDIRECTION.get(object)+",");
				}
			 data.put("$direction$",sb.toString());
			
			//关联对象详细
			 AllRelationWapper allRelation = fileManageService.findRelation(Long.valueOf(ids.split(",")[i]), ConstantManage.FILEOBJECTTYPE);
			 if(allRelation!=null){
				//相关案件
				 StringBuffer table4=new StringBuffer();
				 if(allRelation.getCaseList()!=null&&allRelation.getCaseList().size()>0){
					 for (CaseObject co : allRelation.getCaseList()) {
						 table4.append(j2w.exUtilS(co.getCaseName())+"	");
					}
				 }
				 data.put("$castlist$",table4.toString());
				//相关组织
				 StringBuffer table5=new StringBuffer();
				 if(allRelation.getOrganList()!=null&&allRelation.getOrganList().size()>0){
					 for (Organizationobject oo : allRelation.getOrganList()) {
						 table5.append(j2w.exUtilS(oo.getOrgCName())+"	");
					}
				 }
				 data.put("$organazationlist$",table5.toString());
				//相关人员
				 StringBuffer table6=new StringBuffer();
				 if(allRelation.getPeopleList()!=null&&allRelation.getPeopleList().size()>0){
					 for (Peopleobject p : allRelation.getPeopleList()) {
						 table6.append(j2w.exUtilS(p.getPocnname())+"	");
					}
				 }
				 data.put("$peoplelist$",table6.toString());
				//相关文件
				 StringBuffer table7=new StringBuffer();
				 if(allRelation.getFileList()!=null&&allRelation.getFileList().size()>0){
					 for (FilesObject f : allRelation.getFileList()) {
						 table7.append(j2w.exUtilS(f.getFileName())+"	");
					}
				 }
				 data.put("$filelist$",table7.toString());
				//相关主机
				 StringBuffer table8=new StringBuffer();
				 if(allRelation.getHostList()!=null&&allRelation.getHostList().size()>0){
					 for (HostsObject h : allRelation.getHostList()) {
						 table8.append(j2w.exUtilS(h.getHostName())+"	");
					}
				 }
				 data.put("$hostlist$",table8.toString());
			 }else{
				 data.put("$castlist$","");
				 data.put("$organazationlist$","");
				 data.put("$peoplelist$","");
				 data.put("$filelist$","");
				 data.put("$hostlist$","");
			 }
			 
			 j2w = new Java2word();
			 j2w.toWord(ServletActionContext.getServletContext().getRealPath("/")+"images\\exportFile\\fileM\\FileEx.xml",ServletActionContext.getServletContext().getRealPath("/")+"images\\exportFile\\fileM\\exfile\\file"+i+".doc",data);
		 }
		 filesToZip.fileToZip(ServletActionContext.getServletContext().getRealPath("/")+"images\\exportFile\\fileM\\exfile\\", ServletActionContext.getServletContext().getRealPath("/")+"images\\exportFile\\fileM\\exfile\\", "Files");
		 try {
				inputStream = new ByteArrayInputStream("success".getBytes("utf-8"));
			} catch (UnsupportedEncodingException e) {
				e.printStackTrace();
			}finally{
				try {
					inputStream.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		 return SUCCESS;
	}
	/**
	 * @return
	 * 文件在线预览
	 */
	public String toShowIngOnline(){
		String fid = request.getParameter("fid");
		FilesObject fo = fileManageService.getFileinfoByid(Long.valueOf(fid));
		String filename = fo.getFileName().substring(0,fo.getFileName().indexOf(".")).trim();
		filename = ChineToUtfUtils.getUtf8(filename);
		String directory = "images/uploadFile/"+fo.getAnnexName()+"/"+filename+".swf";
		request.getSession().setAttribute("swfpath", directory);  
		return SUCCESS;
	}
	
	@JSON(serialize=false)
	public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	} @JSON(serialize=false)
	public String getDirection() {
		return direction;
	}
	public void setDirection(String direction) {
		this.direction = direction;
	} @JSON(serialize=false)
	public String getResponsiblePerson() {
		return responsiblePerson;
	}
	public void setResponsiblePerson(String responsiblePerson) {
		this.responsiblePerson = responsiblePerson;
	} @JSON(serialize=false)
	public String getAnnexUrl() {
		return annexUrl;
	}
	public void setAnnexUrl(String annexUrl) {
		this.annexUrl = annexUrl;
	} @JSON(serialize=false)
	public String getFileName() {
		return fileName;
	}
	public void setFileName(String fileName) {
		this.fileName = fileName;
	} @JSON(serialize=false)
	public String getFileContents() {
		return fileContents;
	}
	public void setFileContents(String fileContents) {
		this.fileContents = fileContents;
	} @JSON(serialize=false)
	public Date getCreateTime() {
		return createTime;
	}
	public void setCreateTime(Date createTime) {
		this.createTime = createTime;
	} @JSON(serialize=false)
	public String getRemarkes1() {
		return remarkes1;
	}
	public void setRemarkes1(String remarkes1) {
		this.remarkes1 = remarkes1;
	} @JSON(serialize=false)
	public String getRemarkes2() {
		return remarkes2;
	}
	public void setRemarkes2(String remarkes2) {
		this.remarkes2 = remarkes2;
	} @JSON(serialize=false)
	public Integer getRemarkes3() {
		return remarkes3;
	}
	public void setRemarkes3(Integer remarkes3) {
		this.remarkes3 = remarkes3;
	}
	@JSON(serialize=false)
	public int getYear() {
		return year;
	}
	public void setYear(int year) {
		this.year = year;
	}
	@JSON(serialize=false)
	public int getPageNo() {
		return pageNo;
	}
	public void setPageNo(int pageNo) {
		this.pageNo = pageNo;
	}
	@JSON(serialize=false)
	public int getPageSize() {
		return pageSize;
	}
	public void setPageSize(int pageSize) {
		this.pageSize = pageSize;
	}
	@JSON(serialize=false)
	public Logger getLogger() {
		return logger;
	}
	public void setLogger(Logger logger) {
		this.logger = logger;
	}
	@JSON(serialize=false)
	public InputStream getInputStream() {
		return inputStream;
	}
	public void setInputStream(InputStream inputStream) {
		this.inputStream = inputStream;
	}@JSON(serialize=false)
	public FileManageService getFileManageService() {
		return fileManageService;
	}
	public void setFileManageService(FileManageService fileManageService) {
		this.fileManageService = fileManageService;
	}@JSON(serialize=false)
	public UserService getUserService() {
		return userService;
	}
	public void setUserService(UserService userService) {
		this.userService = userService;
	}@JSON(serialize=false)
	public String getIds() {
		return ids;
	}
	public void setIds(String ids) {
		this.ids = ids;
	}@JSON(serialize=false)
	public String getRootType() {
		return rootType;
	}
	public void setRootType(String rootType) {
		this.rootType = rootType;
	}@JSON(serialize=false)
	public String getRootId() {
		return rootId;
	}
	public void setRootId(String rootId) {
		this.rootId = rootId;
	}
	@JSON(serialize=false)
	public File getFileField() {
		return fileField;
	}
	public void setFileField(File fileField) {
		this.fileField = fileField;
	}
	@JSON(serialize=false)
	public String getAnnexName() {
		return annexName;
	}
	public void setAnnexName(String annexName) {
		this.annexName = annexName;
	}@JSON(serialize=false)
	public String getFrom() {
		return from;
	}
	public void setFrom(String from) {
		this.from = from;
	}
	@JSON(serialize=false)
	public String getRelId() {
		return relId;
	}
	public void setRelId(String relId) {
		this.relId = relId;
	}
	@JSON(serialize=false)
	public String getRelType() {
		return relType;
	}
	public void setRelType(String relType) {
		this.relType = relType;
	}
	public PageModel<FilesObject> getPageModel() {
		return pageModel;
	}
	public void setPageModel(PageModel<FilesObject> pageModel) {
		this.pageModel = pageModel;
	}
	
}
