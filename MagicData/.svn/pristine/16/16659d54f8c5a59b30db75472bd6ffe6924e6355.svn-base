package com.integrity.dataSmart.dataImport.action;

import java.io.File;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.apache.struts2.ServletActionContext;

import com.integrity.dataSmart.dataImport.bean.DataImportTask;
import com.integrity.dataSmart.dataImport.pojo.DataImportTaskDetail;
import com.integrity.dataSmart.dataImport.service.DataImpTaskService;
import com.integrity.dataSmart.dataImport.util.StringOrFileUtils;
import com.integrity.login.util.PageInfo;
import com.opensymphony.xwork2.ActionSupport;

public class DataImpTaskAction extends ActionSupport {
	private static final long serialVersionUID = 1L;

	private static final int DEFAULT_BUFFER_SIZE = 0;

	private Logger logger = Logger.getLogger(DataImpTaskAction.class);

	/**
	 * 数据导入任务基本Service
	 */
	private DataImpTaskService dataImpTaskService;
	

	/**
	 * 任务Id(用于任务执行)
	 */
	private String taskId;
	private boolean isSave;//任务保存
	//任务列表分页数据
	private List<DataImportTask> dataRows;
	private PageInfo curPage;
	private Boolean result;
	
	private Map<String,Object> taskValueMaxJsonResult;
	
	private DataImportTaskDetail taskDetail;
	

	public Map<String, Object> getTaskValueMaxJsonResult() {
		return taskValueMaxJsonResult;
	}

	public void setTaskValueMaxJsonResult(Map<String, Object> taskValueMaxJsonResult) {
		this.taskValueMaxJsonResult = taskValueMaxJsonResult;
	}

	/**
	 * 数据导入页面
	 * @return
	 */
	public String viewImportPage(){
		
		return SUCCESS;
	}
	
	/**
	 * 数据导入任务列表
	 * @return
	 */
	public String findImportTaskList() {
		dataRows= dataImpTaskService.findImportTasks(curPage);
		return SUCCESS;
	}
	/**
	 * 保存任务
	 * @return
	 */
	public String saveTask(HttpServletRequest request){
		String taskName = request.getParameter("taskName");
	    String jsonStr = request.getParameter("jsonStr");
	    Date createTime = new Date(System.currentTimeMillis());
		String realpath = ServletActionContext.getServletContext().getRealPath("/")+"images"+File.separator+"uploadJsonFile"+File.separator+"json"+System.currentTimeMillis()+".json";//获取服务器路径
		boolean upload = StringOrFileUtils.string2File(jsonStr, realpath);
		if(upload){
			DataImportTask diTask = new DataImportTask();
			diTask.setTaskName(taskName);
			diTask.setXmlPath(realpath);
			diTask.setBorntime(createTime);
			isSave = dataImpTaskService.saveDataImpTask(diTask);
		}
		return SUCCESS;
	}
	/**
	 * 开始执行任务
	 * @return
	 */
	public String startTask(){
		DataImportTask dt = null;
		String jsonPath = null;
		if (null != taskId && !"".equals(taskId)) {
			dt = dataImpTaskService.getDITaskById(Long.parseLong(taskId));
		}
		if(null!=dt){
			jsonPath = dt.getXmlPath();
		}
/*		curl -X POST http://localhost:6066/v1/submissions/create --header "Content-Type:application/json;charset=UTFF--8" --data '{
			  "action" : "CreateSubmissionRequest",
			  "appArgs" : [ ],
			  "appResource" : "file:/usr/local/newbigdata/spark-1.6.0-bin-without-hadoop/app/TitanSpark_youjar4.jar",
			  "clientSparkVersion" : "1.6.0",
			  "environmentVariables" : {
			    "SPARK_ENV_LOADED" : "1"
			  },
			  "mainClass" : "sparkToTitan.sparkToTitan",
			  "sparkProperties" : {
			    "spark.jars" : "file:/usr/local/newbigdata/spark-1.6.0-bin-without-hadoop/app/TitanSpark_youjar4.jar",
			    "spark.driver.supervise" : "false",
			    "spark.app.name" : "sparkToTitan",
			    "spark.eventLog.enabled": "false",
			    "spark.submit.deployMode" : "client",
			    "spark.master" : "spark://testdocker:7077"
			  }
		 }'
*/		 return SUCCESS;
	}
	/**
	 * 任务详细信息
	 * @return
	 */
	public String showTaskDetail() {
		taskDetail= dataImpTaskService.findTaskDetail(taskId);
		return SUCCESS;
	}
	
	/**
	 * 判断是否存在正在执行的任务
	 * true 有正在执行
	 */
	public String judgeExecute() {
		result = dataImpTaskService.judgeExecute();
		return SUCCESS;
	}
	
	/**
	 * 删除任务
	 */
	public String deleteTaskById() {
		try {
			dataImpTaskService.deleteDTaskById(taskId);
		} catch (Exception e) {
			logger.error("删除任务异常taskId："+taskId,e);
		}
		return SUCCESS;
	}
	
	/**
	 * 执行任务
	 * @return
	 */
	public String executeTask() {
		String webRealPath = ServletActionContext.getServletContext().getRealPath("/");
		DataImportTask dt = null;
		if (null != taskId && !"".equals(taskId)) {
			dt = dataImpTaskService.getDITaskById(Long.parseLong(taskId));
		}
		if(null!=dt){
			if(null!=dt.getTaskType()&&1==dt.getTaskType()){
				result = dataImpTaskService.startJob(taskId,webRealPath);
			}else{
				result = dataImpTaskService.startEmlJob(dt,webRealPath);
			}
		}
		return SUCCESS;
	}

	public void setDataImpTaskService(DataImpTaskService dataImpTaskService) {
		this.dataImpTaskService = dataImpTaskService;
	}

	public String getTaskId() {
		return taskId;
	}

	public void setTaskId(String taskId) {
		this.taskId = taskId;
	}

	public List<DataImportTask> getDataRows() {
		return dataRows;
	}

	public void setDataRows(List<DataImportTask> dataRows) {
		this.dataRows = dataRows;
	}

	public PageInfo getCurPage() {
		return curPage;
	}

	public void setCurPage(PageInfo curPage) {
		this.curPage = curPage;
	}

	public Boolean getResult() {
		return result;
	}

	public void setResult(Boolean result) {
		this.result = result;
	}
	
	public DataImportTaskDetail getTaskDetail() {
		return taskDetail;
	}

	public void setTaskDetail(DataImportTaskDetail taskDetail) {
		this.taskDetail = taskDetail;
	}
	public boolean isSave() {
		return isSave;
	}

	public void setSave(boolean isSave) {
		this.isSave = isSave;
	}

	/*
	 * 获得任务进度
	 */
	public String taskValueMax(){
		/*
		 * 通过数据库获得进度
		 */
		HttpServletRequest request = ServletActionContext.getRequest();
		String id = request.getParameter("id");
		DataImportTask bean = dataImpTaskService.getDITaskById(Long.valueOf(id));
		taskValueMaxJsonResult = new HashMap<String,Object>();
		taskValueMaxJsonResult.put("totality",bean.getTotality());
		taskValueMaxJsonResult.put("importCount",bean.getImportCount());
		taskValueMaxJsonResult.put("isFinish",bean.getRunStatus());
		/*原先通过properties获得进度
		InputStream inputStream = null;
		taskValueMaxJsonResult = new HashMap<String,Object>();
		try {
			inputStream = this.getClass().getClassLoader().getResourceAsStream("../config/dataImport/processBar.properties");
			Properties p = new Properties();
			p.load(inputStream);
			taskValueMaxJsonResult.put("totality",p.getProperty("totality").trim());
			taskValueMaxJsonResult.put("importCount",p.getProperty("importCount").trim());
			taskValueMaxJsonResult.put("isFinish",p.getProperty("isFinish").trim());
		} catch (Exception e) {
			logger.error("进度条配置文件读取错误!", e);
		}finally{
				try {
					if(inputStream!=null)
						inputStream.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
		}*/
		return SUCCESS;
	}

	
}
